<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//RU">
<HTML>
<HEAD>
    <LINK rel=stylesheet href="../../css/styles.css" type=text/css>
    <META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=windows-1251">
    <META HTTP-EQUIV="Content-Language" CONTENT="ru">
    <title>Тема №19</title>
    <base target="_top">
</HEAD>
<BODY>
  <div class="title-1">
    Тема №19 "Пакет Java.io"
</div>
<div class="content">

    <div class="title-2">
        19.1 Система ввода-вывода, потоки данных.
    </div>
    <p>
        Отличительной чертой многих языков программирования является работа с <i>файлами и потоками</i>. В Java основной функционал работы с потоками сосредоточен в классах из пакета <b>java.io.</b>
    </p>
    <p>
        Ключевым понятием здесь является понятие <b>потока</b>. Хотя понятие "поток" в программировании довольно перегружено и может обозначать множество различных концепций. В данном случае применительно к работе с<i> файлами и вводом-выводом</i> мы будем говорить о потоке (stream), как об абстракции, которая используется для <i>чтения или записи информации</i> (файлов, сокетов, текста консоли и т.д.).
    </p>
    <p>
        Поток связан с реальным физическим устройством с помощью системы ввода-вывода Java. У нас может быть определен поток, который связан с файлом и через который мы можем вести чтение или запись файла. Это также может быть поток, связанный с сетевым сокетом, с помощью которого можно получить или отправить данные в сети. Все эти задачи: чтение и запись различных файлов, обмен информацией по сети, ввод-ввывод в консоли мы будем решать в Java с помощью потоков.
    </p>
    <p>
        Объект, из которого можно считать данные, называется <b>потоком ввода</b>, а объект, в который можно записывать данные, - <b>потоком вывода</b>. Например, если надо считать содержание файла, то применяется поток ввода, а если надо записать в файл - то поток вывода.
    </p>
    <p>
        В основе всех классов, управляющих потоками байтов, находятся два <i>абстрактных класса</i>: <b>InputStream</b> (представляющий потоки ввода) и <b>OutputStream</b> (представляющий потоки вывода)
    </p>
    <p>
        Но поскольку работать с байтами не очень удобно, то для работы с потоками символов были добавлены абстрактные классы <b>Reader</b> (для чтения потоков символов) и <b>Writer</b> (для записи потоков символов).
    </p>

    <div class="title-2">
        19.2 Классы InputStream и OutputStream. 
    </div>
    <p>
        Класс <b>InputStream</b> является базовым для всех классов, управляющих байтовыми потоками ввода. Рассмотрим его основные методы:
        <ul class="list">
           <li>   <i>int available():</i> возвращает количество байтов, доступных для чтения в потоке</li>
           <li><i> void close():</i> закрывает поток</li>
           <li>  <i> int read():</i> возвращает целочисленное представление следующего байта в потоке. Когда в потоке не останется доступных для чтения байтов, данный метод возвратит число -1</li>
           <li>   <i> int read(byte[] buffer):</i> считывает байты из потока в массив buffer. После чтения возвращает число считанных байтов. Если ни одного байта не было считано, то возвращается число -1</li>
           <li>  <i>  int read(byte[] buffer, int offset, int length):</i> считывает некоторое количество байтов, равное length, из потока в массив buffer. При этом считанные байты помещаются в массиве, начиная со смещения offset, то есть с элемента buffer[offset]. Метод возвращает число успешно прочитанных байтов.</li>
           <li><i>long skip(long number):</i> пропускает в потоке при чтении некоторое количество байт, которое равно number</li>
       </ul>
   </p>
   <p>
    <br>
    Класс OutputStream является базовым классом для всех классов, которые работают с бинарными потоками записи. Свою функциональность он реализует через следующие методы:
    <ul class="list">
      <li>    <i>  void close():</i> закрывает поток</li>
      <li>  <i>   void flush():</i> очищает буфер вывода, записывая все его содержимое</li>
      <li>   <i>  void write(int b): </i>записывает в выходной поток один байт, который представлен целочисленным параметром b</li>
      <li>   <i>  void write(byte[] buffer):</i>записывает в выходной поток массив байтов buffer.</li>
      <li>   <i>  void write(byte[] buffer, int offset, int length): </i>записывает в выходной поток некоторое число байтов, равное length, из массива buffer, начиная со смещения offset, то есть с элемента buffer[offset].</li>
  </ul>
</p>

<div class="title-2">
    19.3 Сериализация объектов.
</div>
<p>
    <b>Сериализация</b> представляет процесс записи состояния объекта в поток, соответственно процесс извлечения или восстановления состояния объекта из потока называется десериализацией. Сериализация очень удобна, когда идет работа со сложными объектами.
</p>

<p>
    Надо сказать, что сериализовать можно только те объекты, которые реализуют <i><b>интерфейс Serializable</b></i>. Этот интерфейс не определяет никаких методов, просто он служит указателем системе, что объект, реализующий его, может быть сериализован.
</p>
<p>
    Для сериализации объектов в поток используется<i><b> класс ObjectOutputStream</b></i>. Он записывает данные в поток.
</p>
<p>
    Для создания объекта <i>ObjectOutputStream </i>в конструктор передается поток, в который производится запись:

    ObjectOutputStream(OutputStream out)
</p>
<div class="title-2">
    19.4 Классы Reader и Writer. 
</div>
<p>
    <b>Класс FileReader</b>, производный от класса <i>Reader</i>, можно использовать для чтения содержимого файла. В конструкторе класса нужно указать либо путь к файлу, либо объект типа File.
</p>
<p>
    <b>Класс Writer</b> - абстрактный класс, определяющий символьный потоковый вывод. В случае ошибок все методы класса передают исключение IOException.
</p>
<p>
    Методы класса:
    <ul class="list">
        <li>  <i>  Writer append(char c)</i> - добавляет символ в конец вызывающего выходного потока. Возвращает ссылку на вызывающий поток</li>
        <li> <i>   Writer append(CharSequence csq)</i> - добавляет символы в конец вызывающего выходного потока. Возвращает ссылку на вызывающий поток</li>
        <li> <i>   Writer  append(CharSequence csq, int start, int end)</i> - добавляет диапазон символов в конец вызывающего выходного потока. Возвращает ссылку на вызывающий поток</li>
        <li> <i>  abstract void close() </i>- закрывает вызывающий поток</li>
        <li><i>  abstract void flush() </i>- финализирует выходное состояние так, что все буферы очищаются</li>
        <li><i>  void write(int oneChar)</i> - записывает единственный символ в вызывающий выходной поток. Есть и другие перегруженные версии метода</li></ul>
    </p>

    <div class="title-2">
        19.5 Работа с файловой системой
    </div>
    <p>
        <b>Класс File</b>, определенный в пакете <i><b>java.io</b></i>, не работает напрямую с потоками. Его задачей является управление информацией о файлах и каталогах. Хотя на уровне операционной системы файлы и каталоги отличаются, но в Java они описываются одним <i>классом File</i>.
    </p>
    <p>
        В зависимости от того, что должен представлять <i>объект File</i> - файл или каталог, мы можем использовать один из конструкторов для создания объекта:
        <ul class="list">
           <li>  <i> File(String путь_к_каталогу)</i></li>
           <li> <i>   File(String путь_к_каталогу, String имя_файла)</i></li>
           <li>  <i>   File(File каталог, String имя_файла)</i></li>
       </ul>
   </p>


</BODY>
</HTML>