<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//RU">
<HTML>

<HEAD>
    <LINK rel=stylesheet href="../../css/styles.css" type=text/css>
    <META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=windows-1251">
    <META HTTP-EQUIV="Content-Language" CONTENT="ru">
    <title>Тема №26</title>
    <base target="_top">
</HEAD>

<BODY>
    <div class="title-1">
        Тема №26 "JSTL, JSP tags, TagLibs"
    </div>
    <div class="content">
        <p>
            Библиотека тегов представляет собой java­-классы, реализующие определенную бизнес­-логику в соответствии с Tag Libraries
            Interface (интерфейс библиотеки тегов). Структура тегов напоминает структуру сервлетов, которые могут быть многократно
            использованы в течение цикла жизни тегов. Библиотека тегов включает один или несколько тегов­-классов и XML­-дескриптор,
            содержащий описание тегов и параметров, используемых тегами. Код java­-класса, оформленный в виде тега для выполнения
            определенных действий, скрывает от пользователя набор операций, определяющих его функциональность. При использовании
            библиотеки тегов разработка java-­кода на странице JSP заключается в описании пользовательских дескрипторов и
            определением необходимых атрибутов тега (java-­класса).
        </p>
        <p>
            При компиляции страницы JSP в сервлет пользовательские теги преобразуются в действия над объектами серверной стороны. Интерфейсы
            и классы, с помощью которых создаются пользовательские теги, располагаются в пакете javax.servlet.jsp.tagext.
        </p>
        <p>
            <b>JSP</b> (JavaServerPages) — технология, позволяющая веб­-разработчикам создавать содержимое, которое имеет как
            статические, так и динамические компоненты. Страница JSP содержит текст двух типов: статические исходные данные,
            которые могут быть оформлены в одном из текстовых форматов HTML, SVG, WML, или XML, и JSP элементы, которые конструируют
            динамическое содержимое. Кроме этого могут использоваться библиотеки JSP­-тегов, а также EL (Expression Language),
            для внедрения Java-­кода в статичное содержимое JSP­-страниц. Код JSP­-страницы транслируется в Java-­код сервлета
            с помощью компилятора JSP-­страниц Jasper, и затем компилируется в байт­код виртуальной машины java (JVM). Контейнеры
            сервлетов, способные исполнять JSP-­страницы, написаны на платформонезависимом языке Java. JSP­-страницы загружаются
            на сервере и управляются из структуры специального Java server packet, который называется Java EE Web Application.
        </p>
        <p>
            <b>JSTL</b> – стандартная библиотека тегов JSP.
        </p>
        <p>
            Пользовательский тег представляет собой определенный пользователем элемент JSP-­языка. Когда JSP-­страница, содержащая пользовательский
            тег, транслируется в сервлет, тег преобразовывается в операции над объектом, называемым обработчиком тега. Затем
            Web-­контейнер вызывает эти операции во время выполнения сервлета JSP-­страницы. Пользовательские теги могут:
            <ul class="list">
                <li>
                    Быть настроенными при помощи атрибутов, переданных из вызывающей страницы.
                </li>
                <li>
                    Обращаться ко всем объектам, доступным JSP-­странице.
                </li>
                <li>
                    Изменять ответ, генерируемый вызывающей страницей.
                </li>
                <li>
                    Взаимодействовать между собой. Вы можете создать и инициализировать компонент JavaBeans, создать переменную, обращающуюся
                    к этому компоненту в одном теге, и затем использовать этот компонент в другом теге.
                </li>
                <li>Быть вложенными, разрешая сложные взаимодействия в JSP-­странице. </li>
                <li>Пользовательские теги JSP пишутся с использованием синтаксиса XML. Они имеют начальный тег, конечный тег
                    и, возможно, тело.</li>
            </ul>
        </p>
        <p>
            Для объявления, что JSP­-страница будет использовать теги, определенные в библиотеке тегов, при помощи помещения директивы
            taglib в страницу перед использованием какого­-либо пользовательского тега: &lt;%@ taglib uri=&quot;/WEB&shy;INF/tutorial&shy;template.tld&quot;
            prefix=&quot;tt&quot; %&gt;
        </p>
        <p>
            Для определения тега необходимо:
            <ul class="list">
                <li>Разработать обработчик тега и вспомогательный класс для тега </li>
                <li>Объявить тег в дескрипторе библиотеки тегов</li>
            </ul>
        </p>
        <p>
            Обработчик тега представляет собой объект, вызываемый Web-­контейнером для вычисления пользовательского тега во время выполнения
            JSP-­страницы, которая ссылается на тег. Обработчики тегов должны реализовывать интерфейсы либо Tag, либо BodyTag.
            Интерфейсы могут использоваться для существующего объекта Java, чтобы преобразовать его в обработчик тега. Обработчик
            тега имеет доступ к API, позволяющему взаимодействовать с JSP­страницей.
        </p>
        <p>
            Если тег является вложенным, обработчик тега имеет также доступ к обработчику (называемому родитель), связанному с внешним
            тегом.
        </p>
        <p>
            Дескриптор библиотеки тегов (TLD) представляет собой XML-­документ, описывающий библиотеку тегов. TLD содержит общую информацию
            и информацию о каждом теге, содержащемся в библиотеке.
        </p>
    </div>
</BODY>

</HTML>