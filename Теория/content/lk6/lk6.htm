<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//RU">
<HTML>
<HEAD>
  <LINK rel=stylesheet href="../../css/styles.css" type=text/css>
  <META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=windows-1251">
  <META HTTP-EQUIV="Content-Language" CONTENT="ru">
  <title>Тема №6</title>
  <base target="_top">
</HEAD>
<BODY>
  <div class="title-1">
    Тема №6 "Языки программирования. Интерфейс прикладных программ"
  </div>
  <div class="content">
    <div class="title-2">
      6.1 Алгоритмы, универсальные алгоритмические модели
    </div>
    <p>
      Можно выделить три основных типа универсальных алгоритмических моделей:
      <ul class="list">
        <li><i>Рекурсивные функции</i>
          <li><i>Машины Тьюринга</i>
            <li><i>Алгоритмы Маркова</i>
            </ul>
          </p>
          <p>
            <b><i>Первый тип</i> </b>связывает понятие алгоритма с вычислениями и числовыми функциями. Наиболее развитая и изученная модель этого типа – рекурсивные функции – первый способ формализации понятия алгоритма.
          </p>
          <p>
            <b><i>Второй тип</i> </b>основан на представлении об алгоритме как о некотором детерминированном устройстве, способном выполнять в каждый отдельный момент лишь примитивные операции (машина Тьюринга).
          </p>
          <p>
            <b><i>Третий тип</i></b> алгоритмических моделей – это преобразование слов в произвольных алфавитах, в которых элементарными операциями являются подстановки, т.е. замена куска слова (подслова) другим словом (Нормальный алгоритм Маркова, каноническая система Поста).
          </p>
          <p>
            <b><i>Тезис Чёрга:</i></b> Класс задач, решаемых в любой из этих формальных моделей, и есть класс всех задач, которые могут быть решены интуитивно алгоритмическими методами.
          </p>
          <div class="title-2">
            6.2 Языки программирования и их классификация
          </div>
          <p>
           <i>Языки программирования</i> также можно разделять на поколения:
           <ul class="list">
            <li>языки первого поколения: машинно–ориентированные с ручным управлением памяти на компьютерах первого поколения.
             <li>языки второго поколения: с мнемоническим представлением команд, так называемые автокоды.
               <li>языки третьего поколения: общего назначения, используемые для создания прикладных программ любого типа. Например,<b> Бейсик, Кобол, Си и Паскаль.</b>
                 <li>языки четвертого поколения: усовершенствованные, разработанные для создания специальных прикладных программ, для управления базами данных.
                   <li>языки программирования пятого поколения: языки декларативные, объектно–ориентированные и визуальные. Например, <b>Пролог, ЛИСП </b>(используется для построения программ с использованием методов искусственного интеллекта), <b>Си++, Visual Basic, Delphi.</b>
                   </ul>
                 </p>
                 <div class="title-2">
                  6.3  Интерфейс прикладных программ, программирование под Windows
                </div>
                <p>
                  <b>Прикладной программный интерфейс </b><i>(application programming interface, API) </i>— это описание способа, который позволяет какому-либо фрагменту ПО обращаться к другой программе за получением сервиса. Этим сервисом может быть предоставление доступа к данным или выполнение конкретной функции. Интерфейсы разработаны для большей части ПО уровня предприятия и играют критически важную роль в операционных системах, которые управляют большинством базовых функций компьютера
                </p>
                



              </BODY>
            </HTML>