<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//RU">
<HTML>
<HEAD>
    <LINK rel=stylesheet href="../../css/styles.css" type=text/css>
    <META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=windows-1251">
    <META HTTP-EQUIV="Content-Language" CONTENT="ru">
    <title>Тема №11</title>
    <base target="_top">
</HEAD>
<BODY>
  <div class="title-1">
    Тема №11 "Имена и пакеты"
</div>
<div class="content">
    <div class="title-2">
        11.1 Простые и составные имена. 
    </div>
    <p><b>Имена</b></p>
    <p>   Имена бывают <i>простыми (simple)</i>, состоящими из одного идентификатора (они определяются во время объявления) и<i> составными (qualified)</i>, состоящими из последовательности идентификаторов, разделенных точкой. Для пояснения этих терминов необходимо рассмотреть еще одно понятие.
    </p>
    <p>
        У <i>пакетов и ссылочных типов</i> (классов, интерфейсов, массивов) есть <b>элементы (members)</b>. Доступ к элементам осуществляется с помощью выражения, состоящего из имен, например, пакета и класса, разделенных точкой.
    </p><p>
        Далее классы и интерфейсы будут называться объединяющим термином <i><b>тип (type)</b></i>.
    </p><p>
     <b>   Пакеты</b>
    </p><p>
        Программа на Java представляет собой<i> набор пакетов (packages)</i>. Каждый пакет может включать <i>вложенные </i>пакеты, то есть они образуют иерархическую систему.
    </p><p>
        Кроме того, пакеты могут содержать классы и интерфейсы и таким образом группируют типы. Это необходимо сразу для нескольких целей.
    </p>
    <p><b> Во-первых,</b> чисто физически невозможно работать с большим количеством классов, если они "свалены в кучу". 
    </p>
    <p><b>Во-вторых,</b> модульная декомпозиция облегчает проектирование системы. К тому же, как будет показано ниже, существует специальный уровень доступа, позволяющий типам из одного пакета более тесно взаимодействовать друг с другом, чем с классами из других пакетов. Таким образом, с помощью пакетов производится логическая группировка типов. Из ООП известно, что большая связность системы, то есть среднее количество классов, с которыми взаимодействует каждый класс, заметно усложняет развитие и поддержку такой системы. Используя пакеты, гораздо проще организовать эффективное взаимодействие подсистем друг с другом.
    </p><p>
        Наконец, каждый пакет имеет свое пространство имен, что позволяет создавать одноименные классы в различных пакетах. Таким образом, разработчикам не приходится тратить время на разрешение конфликта имен.
    </p>
</p>
<div class="title-2">
    11.2  Различие между именами и идентификаторами.
</div>
<p>
    <b>Имена и идентификаторы</b>
</p><p>
    Теперь, когда мы рассмотрели простые и составные имена, уточним<b> разницу между идентификатором (напомним, что это вид лексемы) и именем</b>. Понятно, что простое имя состоит из одного идентификатора, а составное - из нескольких. Однако не всякий идентификатор входит в состав имени.
</p><p>
    <b>Во-первых,</b> в выражении объявления (declaration) идентификатор еще не является именем. Другими словами, он становится именем после первого появления в коде в месте объявления.
</p><p>
   <b> Во-вторых,</b> существует возможность обращаться к полям и методам объектного типа не через имя типа или объектной переменной, а через ссылку на объект, полученную в результате выполнения выражения. 
</p>
<div class="title-2">
    11.3 Элементы пакетов, платформенная поддержка пакетов.
</div>
<p>
 <b>   Элементы пакета</b>
</p><p>
    Еще раз повторим, что элементами пакета являются вложенные пакеты и типы (классы и интерфейсы). Одноименные элементы запрещены, то есть не может быть одноименных класса и интерфейса, или вложенного пакета и типа. В противном случае возникнет ошибка компиляции.
</p><p>
    Например, в JDK 1.0 пакет java содержал пакеты applet, awt, io, lang, net, util и не содержал ни одного типа. В пакет java.awt входил вложенный пакет image и 46 классов и интерфейсов.
</p><p>
   <i> Составное имя любого элемента пакета </i>– это составное имя этого пакета плюс простое имя элемента. Например, для класса Object в пакете java.lang составным именем будет java.lang.Object, а для пакета image в пакете java.awt – java.awt.image.
</p><p>
    Иерархическая структура пакетов была введена для удобства организации связанных пакетов, однако вложенные пакеты, или соседние, то есть вложенные в один и тот же пакет, не имеют никаких дополнительных связей между собой, кроме ограничения на несовпадение имен. Например, пакеты space.sun, space.sun.ray, space.moon и factory.store совершенно "равны" между собой и типы одного из этих пакетов не имеют никакого особенного доступа к типам других пакетов.
</p>
<div class="title-2">
    11.4 Модуль компиляции. Уникальность имен пакетов. Область видимости имен
</div>

<p>
   <b> Модуль компиляции </b>(compilation unit) хранится в текстовом .java -файле и является единичной порцией входных данных для компилятора. Он состоит из трех частей:
<ul class="list">
  <li>   объявление пакета ;</li>

   <li>   import -выражения;</li>

     <li> объявления верхнего уровня.</li>
 </ul>
</p><p>
    Объявление пакета одновременно указывает, какому пакету будут принадлежать все объявляемые ниже типы. Если данное выражение отсутствует, значит, эти классы располагаются в безымянном пакете (другое название – пакет по умолчанию).
</p><p>
    <i><b>Import</b></i> -выражения позволяют обращаться к типам из других пакетов по их простым именам, "импортировать" их. Эти выражения также необязательны.

    Наконец, объявления верхнего уровня содержат объявления одного или нескольких типов. Название "верхнего уровня" противопоставляет эти классы и интерфейсы, располагающиеся в пакетах, внутренним типам, которые являются элементами и располагаются внутри других типов. Как ни странно, эта часть также является необязательной, в том смысле, что в случае ее отсутствия компилятор не выдаст ошибки. Однако никаких .class -файлов сгенерировано тоже не будет.
</p><p>
    Доступность модулей компиляции определяется поддержкой платформы, т.к. утилиты Java являются обычными программами, которые исполняются операционной системой по общим правилам.
</p><p>
    Пакет по умолчанию был введен в Java для облегчения написания очень небольших или временных приложений, для экспериментов. Если же программа будет распространяться для пользователей, то рекомендуется расположить ее в пакете, который, в свою очередь, должен быть правильно назван. Соглашения по именованию рассматриваются ниже.
</p><p>
   <b><i> Доступность пакета</i></b> определяется по доступности модулей компиляции, в которых он объявляется. Точнее, пакет доступен тогда и только тогда, когда выполняется любое из следующих двух условий:
<ul class="list">
    <li> доступен модуль компиляции с объявлением этого пакета;</li>

   <li> доступен один из вложенных пакетов этого пакета.</li></ul>
</p><p>
    Если пакет доступен, то область видимости его объявления – все доступные модули компиляции. Проще говоря, все существующие пакеты доступны для всех классов, никаких ограничений на доступ к пакетам в Java нет.
</p><p>
    Требуется, чтобы пакеты java.lang и java.io, а значит, и java, всегда были доступны для Java-платформы, поскольку они содержат классы, необходимые для работы любого приложения.
    <p>



    </BODY>
</HTML>