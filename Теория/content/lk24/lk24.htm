<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//RU">
<HTML>

<HEAD>
    <LINK rel=stylesheet href="../../css/styles.css" type=text/css>
    <META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=windows-1251">
    <META HTTP-EQUIV="Content-Language" CONTENT="ru">
    <title>Тема №24</title>
    <base target="_top">
</HEAD>

<BODY>
    <div class="title-1">
        Тема №24 "Servlet"
    </div>
    <div class="content">
        <p>
            <b>Сервлет</b> – интерфейс Java, реализация которого расширяет функциональные возможности сервера. Сервлет взаимодействует
            с клиентами посредством принципа запрос/­ответ.
        </p>
        <p>
            Пакеты javax.servlet и javax.servlet.http обеспечивают интерфейсы и классы для создания сервлетов.
        </p>
        <p>
            <b>Жизненный цикл сервлета</b> состоит из следующих шагов:
            <ol class="list">
                <li>В случае отсутствия сервлета в контейнере.
                    <ol class="list">
                        <li>Класс сервлета загружается контейнером.</li>
                        <li>Контейнер создает экземпляр класса сервлета. </li>
                        <li>Контейнер вызывает метод init(). Этот метод инициализирует сервлет и вызывается в первую очередь,
                            до того, как сервлет сможет обслуживать запросы. За весь жизненный цикл метод init() вызывается
                            только один раз.</li>
                    </ol>
                </li>
                <li>Обслуживание клиентского запроса. Каждый запрос обрабатывается в своем отдельном потоке. Контейнер вызывает
                    метод service() для каждого запроса. Этот метод определяет тип пришедшего запроса и распределяет его
                    в соответствующий этому типу метод для обработки запроса. Разработчик сервлета должен предоставить реализацию
                    для этих методов. Если поступил запрос, метод для которого не реализован, вызывается метод родительского
                    класса и обычно завершается возвращением ошибки инициатору запроса. </li>
                <li>В случае, если контейнеру необходимо удалить сервлет, он вызывает метод destroy(), который снимает сервлет
                    из эксплуатации. Подобно методу init(), этот метод тоже вызывается единожды за весь цикл сервлета.</li>
            </ol>
        </p>
        <p>
            <b>Методы</b>:
            <ul class="list">
                <li>doGet</li>
                <li>doPost</li>
                <li>doPut</li>
                <li>doDelete </li>
                <li>getServletInfo</li>
            </ul>
        </p>
        <p>
            <b>Пример сервлета:</b>
            <img src="../../images/lk24.PNG" class="center">
        </p>
        <p>
            <i>HttpServletRequest request</i> – запрос, который пришел к серверу.
        </p>
        <p>
            <i>HttpServletResponse response</i> – ответ, который даст сервер.
        </p>
        <p>
            Регистрация сервлетов и фильтров происходит добавлением аннотаций, таких как @WebServlet, @WebFilter и @WebListener, к соответствующим
            классам. Это не только упрощает кодирование классов сервлетов, фильтров и слушателей, но и делает необязательным
            дескриптор развертывания web.xml.
        </p>
        <p>
            @WebServlet ­ аннотация уровня класса. Указывает, что аннотированный класс является сервлетом, и содержит некоторые метаданные
            о сервлете.
        </p>
        <p>
            @WebFilter и @WebListener­ аннотации, используемые для объявления фильтров и слушателей в классах веб-­приложения.
        </p>
        <p>
            У всех аннотаций могут указываться в скобках параметры. Нужно заметить, что дескриптор развертывания (web.xml) имеет приоритет
            над аннотациями.
        </p>
        <p>
            <b>Web.xml</b> (дескриптор развертывания) ­ конфигурационный файл артефакта, который будет развернут в контейнере
            сервлетов. Этот конфигурационный файл указывает параметры развертывания для модуля или приложения с определенными
            настройками, параметры безопасности и описывает конкретные требования к конфигурации. Для синтаксиса файлов дескриптора
            развертывания используется язык XML.
        </p>
    </div>
</BODY>

</HTML>