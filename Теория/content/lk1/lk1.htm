<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//RU">
<HTML>
<HEAD>
<LINK rel=stylesheet href="../../css/styles.css" type=text/css>
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=windows-1251">
<META HTTP-EQUIV="Content-Language" CONTENT="ru">
<title>Тема №1</title>
<base target="_top">
</HEAD>
<BODY>
  <div class="title-1">
    Тема №1 "История развития современных языков программирования"
  </div>
  <div class="content">
    <div class="title-2">
        1.1 Машинный код. Ассемблер
    </div>
    <p>
     История языков программирования началась с разработки машинного языка : языка логических нулей и единиц. Запись на этом языке была очень сложной и утомительной.
    </p>
    <p>
     Поэтому в конце 40-х для облегчения работы первых программистов был создан <b>язык ассемблер</b>. Вместо двоичных цифр, обозначающих какую-то команду, писались короткие слова или аббревиатура. Программисты называют ассемблер <i>языком программирования низкого уровня</i>, поскольку он близок к машинному языку - языку программирования самого низкого уровня. Программы на ассемблере зависят от характеристик конкретного процессора, поэтому его называют <i>машинно-ориентированным языком</i>.
    </p>
    <p>
     Несмотря на всю сложность написания программ и необходимость знаний устройств компьютера именно программы на ассемблере являются самыми эффективными и работоспособными.
    </p>
     <div class="title-2">
        1.2 Алгоритмические языки
    </div>
    <p>
      Вскоре возникла необходимость создания новых, более совершенных языков программирования, которые бы напоминали естественные языки и позволяли бы не работать напрямую с машинными командами. Они стали называться <i>языками высокого уровня</i>.
    </p>
    <p>
      Такие языки ориентированы на описание алгоритмов. Поэтому их еще называют <i>алгоритмическими языками</i>. Их преимущество заключается в большей наглядности и независимости от конкретного компьютера.
    </p>
    <p>
      Поскольку компьютер распознает только машинный язык, программа на алгоритмическом языке перед выполнением переводится на этот язык с помощью специальной программы <i>транслятора</i>. В программе трансляторе "заложены" все правила алгоритмического языка и способы преобразования различных его конструкции на машинный язык. 
      <p>
        Существуют два способа трансляции:
      </p>
    </p>
    <p>
      <ul class="list">
      <li><i><b>Компиляция</b> (Compilation)</i> - метод выполнения программы, при котором инструкции программы выполняются лишь тогда, когда собран перевод всего текста программы.
      <li><i><b>Интерпретация</b> (Interpretation)</i> - метод выполнения программы, при котором инструкции программы переводятся и сразу выполняются.
       </ul>
    </p>
    <p> 
      Работа с программой, написанной на алгоритмическом языке, упрощается за счет относительной простоты написания, удобной читаемости, возможности ее коррекции. Однако при этом очевидны и недостатки: дополнительное время и память на трансляцию.
    </p>
    <div class="title-2">
     1.3 Структурное программирование
    </div>
    <p>
      В 1954 году началась разработка первого компилятора языка высокого уровня. По прошествии 2-х лет был создан язык<b> Fortran </b> <i>(от англ. FORmula TRANslator - Переводчик формул)</i>. В языке имелись средства, значительно упрощающие разработку, однако программирование на Fortran представляло собой задачу непростую : легко понимаемый в коротких программах, этот язык становился нечитаемым, когда дело касалось больших программ. Однако этот язык имел успех и было выпущено много его версий.
    </p>
    <p>
      В течение десятилетия было создано достаточно большое количество новых языков : <b>Algol </b>(1958) - для записи алгоритмов, составленных из обособленных блоков;<b>Cobol (1959)</b>  - для массовой обработки данных в сферах управления и бизнеса;<b> Basic (1965)</b>  - для написания простых программ, обучению азам программирования. Однако совсем немногие из них были <i>структурированными</i>. Также было создано много других <i>специализированных</i> языков : Lisp, Prolog, Forth, PL/1...
    </p>
    <p>
      Особое внимание заслуживает язык <b>Pascal</b> (1970) (назван в честь ученого Блеза Паскаля), который можно было использовать как для обучения, так и для решения задач различной сложности. Программы на нем легко читались, что позволяло быстро находить и исправлять ошибки, также он обладал хорошо выраженной структурированностью. Это привело к его широкой распространенности, и даже сейчас его все еще активно используют в учебных заведениях.
    </p>
    <p>
      Очень успешным шагом стал появившийся в 1972 году <b>язык C</b> . Он сочетал в себе достижения многих языков, а также обладал большим количеством различных нововведений. Широкие возможности, структурированность, а также относительная простота изучения позволили ему быстро завоевать признание и стать одним из основных языков.
    </p>
    <div class="title-2">
     1.4 Объектно-ориентированное программирование (ООП)
    </div>
    <p>
      В 70-х были созданы основы нового <i>Объектно-ориентированного программирования</i>. ООП возникло в результате развития идеологии процедурного программирования, где данные и подпрограммы (процедуры, функции) их обработки формально не связаны.
    <p>Основными понятиями ООП являются:</p>
    <p>
    <ul class="list">
      <li><b><i>Класс</b></i> - модель ещё не существующего объекта. Фактически он описывает устройство объекта, являясь его схемой.
    <li><b><i>Объект</b></i> - экземпляр класса, сущность в адресном пространстве вычислительной системы, появляющаяся при создании экземпляра класса.
    <li><b><i>Абстракция</b></i> - придание объекту характеристик, которые чётко определяют его границы, отличая от всех других объектов. Основная идея состоит в том, чтобы отделить способ использования составных объектов данных от деталей их реализации в виде более простых объектов.
    <li><b><i>Инкапсуляция</i></b> - объединение свойств (данных) и методов (подрограмм) в классе с целью сокрытия данных объекта от остальной программы и обеспечения целостности и независимоти объекта. (изменять свойства объекта иожно только через специальные методы класса)
    <li><b><i>Наследование</i></b> - механизм языка, позволяющий описать новый класс на основе уже существующего класса (или классов) с добавлением новых свойств и методов.
    <li><b><i>Полиморфизм</b></i> - свойство системы использовать объекты с одинаковым интерфейсом без информации о типе и внутренней структуре объекта.
    </ul>
    <p>Первым языком программирования, в котором были предложены принципы объектной ориентированности, была Симула. В момент его появления в 1967 году в нём были предложены революционные идеи: объекты, классы, виртуальные методы и т.д., но это всё не было достойно оценено современниками. Тем не менее, большинство концепций были развиты Аланом Кэем и Дэном Ингаллсом в языке Smalltalk. Именно он стал первым широко распространённым объектно-ориентированным языком программирования.
    <p>В настоящее время количество прикладных языков программирования, реализующих объектно-ориентированную парадигму, является наибольшим по отношению к другим парадигмам. Основные языки, поддерживающие концепцию ООП : C#, Object Pascal (Delphi), Java...
    </p>
    <div class="title-2">
      1.5 Развитие интернета
    </div>

    <p>
      С появлением технологии <i>World Wide Web</i> (WWW) Интернет приобрел большую популярность. Было создано много вспомогательных языков для работы с
    Интернетом, оформления сайтов, доступа к ресурсам и т.д.
    <p>
      Повсеместно распространен интерпретируемый, простой и легко переносимый на другие платформы язык<b> Perl</b>. Он используется для написания различных по сложности приложений и CGI-скриптов. Значительную роль в развитии и функционировании Интернета играет язык <i>Java</i>.
    <p>
      В 70-х годах появился язык структурированных запросов <b>SQL</b>, созданный для доступа и манипуляций с <i>базами данных</i>.
    <p>
      Для написания основы страниц Web-сайтов используется <b>HTML</b> (Язык разметки гипертекстов). Он обладает всеми возможностями разметки и оформления текста, графики. 
    </p>
    <p>Для большей привлекательности и функциональности сайта используются : </p>
    <ul class="list">
      <li>Сценарии, написанные на <b>JavaScript</b>, выполняются на Web-браузере пользователя. В основном используются для улучшения внешнего вида сайта и решения мелких задач. 
      <li>Сценарии, написанные на языке <b>PHP</b>, выполняются на стороне сервера и посылающие в браузер пользователя уже обработанную информацию. Используются для создания Динамических HTML-страниц, гостевых книг, форумов, опросов. 
      <li>CGI-скрипты, написанные преимущественно на <i>Perl, C/C++</i>, выполняются на стороне сервера и зависящие от конкретных действий пользователя. Имеют назначение сходное со сценариями PHP.
      </ul>
    </p>

</BODY>
</HTML>