<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//RU">
<HTML>

<HEAD>
    <LINK rel=stylesheet href="../../css/styles.css" type=text/css>
    <META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=windows-1251">
    <META HTTP-EQUIV="Content-Language" CONTENT="ru">
    <title>Тема №28</title>
    <base target="_top">
</HEAD>

<BODY>
    <div class="title-1">
        Тема №28 "JDBC"
    </div>
    <div class="content">
        <p>
            <b>JDBC</b> ­- это прикладной программный интерфейс (API) Java для выполнения SQL­-запросов. JDBC предоставляет
            стандартный API для разработчиков, использующих базы данных.
        </p>
        <p>
            <b>Компоненты JDBC:</b>
            <ul class="list">
                <li>Driver Manager
                    <ul class="list">
                        <li>предоставляет средства для управления набором драйверов баз данных?</li>
                        <li>предназначен для выбора базы данных и создания соединения с БД.</li>
                    </ul>
                </li>
                <li>Драйвер
                    <ul class="list">
                        <li>обеспечивает реализацию общих интерфейсов для конкретной СУБД.</li>
                    </ul>
                </li>
                <li>Соединение (Connection)
                    <ul class="list">
                        <li>Сессия между приложением и драйвером базы данных. </li>
                    </ul>
                </li>
                <li>Запрос
                    <ul class="list">
                        <li>SQL запрос на выборку или изменение данных.</li>
                    </ul>
                </li>
                <li>Результат
                    <ul class="list">
                        <li>Логическое множество строк и столбцов таблицы базы данных. </li>
                    </ul>
                </li>
                <li>Метаданные
                    <ul class="list">
                        <li>Сведения о полученном результате и об используемой базе данных. </li>
                    </ul>
                </li>
            </ul>
        </p>
        <p>
            <b>Использование JDBC</b>
        </p>
        <p>
            <u>Последовательность действий:</u>
            <ol class="list">
                <li>Загрузка класса драйвера базы данных.</li>
                <li>Установка соединения с БД.</li>
                <li>Создание объекта для передачи запросов.</li>
                <li>Выполнение запроса.</li>
                <li>Обработка результатов выполнения запроса.</li>
                <li>Закрытие соединения.</li>
            </ol>
        </p>
        <p>
            <u>Загрузка драйвера базы данных:</u>
        </p>
        <p>
            В общем виде: Class.forName([location of driver]). Для MySQL: Class.forName("org.gjt.mm.mysql.Driver"). Согласно принятому
            соглашению классы JDBC-­драйверов регистрируют себя сами при помощи Driver Manager во время своей первой загрузки.
        </p>
        <p>
            <u>Установка соединения с базой данных:</u>
        </p>
        <p>
            Объект Connection представляет собой соединение с БД. Сессия соединения включает в себя выполняемые SQL-­запросы и возвращаемые
            через соединение результаты. Приложение может открыть одно или более соединений с одной или несколькими БД.
        </p>
        <p>
            Класс DriverManager содержит список зарегистрированных классов Driver и обеспечивает управление ими, и при вызове метода
            getConnection он проверяет каждый драйвер и ищет среди них тот, который "умеет" соединяться с БД, указанной в
            URL. Метод connect() драйвера использует этот URL для установления соединения.
        </p>
        <p>
            Вызов метода DriverManager.getConnection(…) ­ стандартный способ получения соединения Методу передается строка, содержащая
            "URL". Класс DriverManager пытается найти драйвер, который может соединиться c БД с помощью данного URL.
        </p>
        <br>
        <p>
            В JDBC есть три класса для отправления SQL-­запросов в БД и три метода в интерфейсе Connection определяют экземпляры этих
            классов:
            <ul class="list">
                <li>
                    <i>Statement:</i> создается методом createStatement. Объект Statement используется при простых SQL-­запросах
                    (без параметров). </li>
                <li>
                    <i>PreparedStatement:</i> Метод prepareStatement используется для SQL-­выражений с одним или более входным
                    (IN­) параметром простых SQL-­выражений, которые исполняются часто. Для компиляции SQL запроса, в котором
                    отсутствуют конкретные значения, используется метод prepareStatement(String sql), возвращающий объект
                    PreparedStatement. Подстановка реальных значений происходит с помощью методов setString(), setInt() и
                    подобных им. Выполнение запроса производится методами executeUpdate(), executeQuery(). PreparedStatement
                    ­ оператор предварительно откомпилирован, поэтому он выполняется быстрее обычных операторов ему соответствующих.</li>
                <li>
                    <i>CallableStatement:</i> создается методом prepareCall. Объекты CallableStatement используются для выполнения
                    т.н. хранимых процедур ­ именованных групп SQL­-запросов, наподобие вызова подпрограммы. </li>
            </ul>
        </p>
        <br>
        <p>
            Метод executeQuery возвращает объект типа ResultSet с построчными результатами выполнения запроса.
        </p>
        <p>
            ResultSet rs = stat.executeQuery("SELECT * FROM Books");
        </p>
        <p>
            При обработке отдельной строки нужно с помощью специальных методов получить содержимое каждого столбца.
        </p>
        <p>
            Для каждого типа данных языка Java предусмотрен отдельный метод извлечения данных, например getString и getDouble. Каждый
            из них имеет два способа представления, основанных на числовом и строковом типе аргумента. При использовании
            числового аргумента метод извлечет данные из столбца с указанным аргументом-­номером. Например, метод rs.getString(1)
            возвратит значение из первого столбца текущей строки. При использовании строкового аргумента метод извлечет данные
            из столбца с указанным аргументом-именем. Например, метод rs.getDouble("Price") возвратит значение из столбца
            с именем Price. Первый способ на основе числового аргумента более эффективен, но строковые аргументы позволяют
            создать более читабельный и простой для сопровождения код. Каждый метод извлечения данных выполняет преобразование
            типа, если указанный тип не соответствует фактическому типу.
        </p>
    </div>
</BODY>

</HTML>