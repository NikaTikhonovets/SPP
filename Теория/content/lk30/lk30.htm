<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//RU">
<HTML>

<HEAD>
    <LINK rel=stylesheet href="../../css/styles.css" type=text/css>
    <META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=windows-1251">
    <META HTTP-EQUIV="Content-Language" CONTENT="ru">
    <title>Тема №30</title>
    <base target="_top">
</HEAD>

<BODY>
    <div class="title-1">
        Тема №30 "Struts2"
    </div>
    <div class="content">
        <div class="title-2">
            Фреймворк Struts 2
        </div>
        <p>
            <b>Framework Struts</b> - это среда Open Source для разработки Web-приложений с помощью технологий Java Servlet
            and Java Server Pages (JSP). Struts способствует разработке приложений с архитектурой, базирующейся на парадигме
            Model-View-Controller, известной как Model 2. Cледующие составные части фреймворка и их функции определены в
            Struts:
            <ol class="list">
                <li>Сервлет-контролер (controller servlet) координирует запросы к соответствующим классам-действиям (action),
                    созданным разработчиками приложения.</li>
                <li>Библиотеки JSP тэгов поддерживаются сервлетом-контроллером, что помогает разработчикам в создании интерактивных
                    Web-приложений, основанных на шаблонах.</li>
                <li>Вспомогательные классы для поддержки разбора (parsing) XML, автоматического управления свойствами JavaBeans
                    класса-действия, и интернационализации сообщений и запросов.</li>
            </ol>
        </p>
        <div class="title-2">
            Архитектура Struts 2
        </div>
        <p>
            <b>Struts 2</b> - это каркас для разработки WEB-приложений, который создан и используется вместе с популярной платформой
            J2EE (Java 2, Enterprise Edition) . Данный фреймворк укорачивает время разработки и делает разработчиков более
            продуктивными, обеспечивая их набором инструментов и компонент для создания приложений. Каркас определяется в
            словаре, как "структура для поддержки и окружения чего-либо другого...". Это определение исключительно точно
            описывает Struts2 - совокупность Java-кода в виде набора библиотек, спроектированных для того, чтобы помочь создавать
            надежные приложения с экономией времени. Архитектура Struts2 представлена на рисунке:
            <br>
            <img src="../../images/lk30.GIF" class="center center-small">
        </p>
        <p>
            Минимальный набор требуемых библиотек Struts2
            <ul class="list">
                <li>struts2­core*.jar - ядро Struts2;</li>
                <li>xwork­*.jar -­ фреймворк построен на базе XWork;</li>
                <li>ognl*.jar -­ используется в качестве языка выражений OGNL;</li>
                <li>freemarker*.jar -­ кастом теги JSP написаны на freemarker;</li>
                <li>commons­fileupload­*.jar -­ библиотека загрузки файлов;</li>
                <li>commons­io­*.jar ­- библиотека для работы с операциями ввода/вывода;</li>
                <li>commons­logging­*.jar -­ Struts 2 использует commons logging API для протоколирования.</li>
            </ul>
        </p>
        <p>
            Все библиотеки фреймворков в WEB­-приложениях располагаются в директории WEB­INF/lib.
        </p>
        <p>
            <b>FilterDispatcher</b> перехватывает все обращения браузера клиента к серверу, подобно сервлетному фильтру.
        </p>
        <p>
            Фреймворк в начале обработки запроса пользователя просматривает список всех подключенных перехватчиков (интерцепторов). Если
            интерцептор проверки присутствует, то он вызывается первым. Для разработчиков необходимо только создать Action­класс,
            наследующий ActionSupport, и переопределить метод
            <i>validate</i>, в котором описать всю логику проверки. Метод
            <i>validate</i>
            определен в интерфейсе com.opensymphony.xwork2.Validateable, который реализуется классом ActionSupport. Реализованные механизмы
            класса ActionSupport позволяют отобразить результаты проверки пользователю.
        </p>
        <p>
            В унаследованном от ActionSupport action-классе EmployeeAction.java переопределены метод execute и validate. Основная функция
            метода validate связана с проверкой двух параметров - заполнение поля "Имя" и определение возраста в пределах
            от 24 до 65.

        </p>
        <p>
            Следует обратить внимание на два метода ActionSupport, которые позволяют сообщать об ошибках. Это метод addActionError, который
            сообщает об ошибке при выполнении действия, и addFieldError, сообщающий об ошибке при заполнении определенного
            поля.

        </p>
        <p>
            Методу addFieldError необходимо передать два параметра. Первым параметром является поле формы, над которым будет размещена
            ошибка. Вторым параметром является текст ошибки. Методу addActionError в качестве параметра передается только
            текст ошибки.
        </p>
        <p>
            Таким образом, если не заполнено имя пользователя, или не правильно указан возраст, то логично вызвать addFieldError. А если,
            например, не заполнено несколько полей или имеются различия в связанных полях (пароль и подтверждение), то логичнее
            выдать сообщение об общей ошибке.
        </p>
        <p>
            Перехватчики могут выполнять огромный объем работы: разбор параметров запроса, загрузку исходных данных, обработку исключений,
            проверку корректности данных. Перехватчики являются для действий в Struts2 тем же, чем фильтры для сервлетов.
            Перехватчики представляют собой Java-­классы, наследующие (implements) свойства интерфейса Interceptor. Подключаются
            перехватчики к WEB­-приложению на уровне файла конфигурации struts.xml.
        </p>
    </div>
</BODY>

</HTML>