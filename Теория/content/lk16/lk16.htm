<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//RU">
<HTML>
<HEAD>
    <LINK rel=stylesheet href="../../css/styles.css" type=text/css>
    <META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=windows-1251">
    <META HTTP-EQUIV="Content-Language" CONTENT="ru">
    <title>Тема №16</title>
    <base target="_top">
</HEAD>
<BODY>
  <div class="title-1">
    Тема №16 "Объектная модель в Java"
</div>
<div class="content">
    <div class="title-2">
        16.1 Статические элементы.
    </div>
    <p>
        <b>Статическим методом </b>называется фрагмент программы, которому присвоено некоторое уникальное имя, и который по этому имени можно вызывать из остальных частей программы. В момент, когда происходит вызов, выполняются действия, перечисленные внутри метода (в его описании или теле).
    </p>
    <p>
        В объектно-ориентированном программировании основная задача методов заключается в том, чтобы изменять текущее состояние объекта, но до тех пор, когда в программе объекты ещё не используются, методы уже могут вводиться. Метод, который описан внутри некоторого класса, но вызывается без приложения к конкретному объекту этого класса, называется статическим.
    </p>
    <p>
        Кроме имени и описания, о которых сказано выше, у метода есть ряд других характеристик:
        <ul class="list">
            <li>Набор модификаторов.</li>
            <li>Тип возвращаемого значения.</li>
            <li>Набор аргументов (параметров).</li>
        </ul>
    </p>
    <div class="title-2">
        16.2 Ключевые слова this, super.
    </div>
    <p>
        <b>this</b> и <b>super</b> — это два специальных <i>ключевых</i> слова в Java, которые представляют соответственно текущий экземпляр класса и его суперкласса. 
    </p>
    <br>
    <p>
        <b>Чем <i>this</i> и <i>super</i> похожи:</b>
    </p>
    <p>

        1) И this, и super — это <b>нестатические переменные</b>, соответственно их нельзя использовать в статическом контексте, а это означает, что их нельзя использовать в методе main. Это приведет к ошибке во время компиляции «на нестатическую переменную this нельзя ссылаться из статического контекста». То же самое произойдет, если в методе main воспользоваться ключевым словом super.
    </p>
    <p>
        2) И this, и super <i>могут использоваться внутри конструкторов для <b>вызова других конструкторов</b> по цепочке</i>, this() и super() вызывают конструктор без аргументов наследующего и родительского классов соответственно.
    </p>
    <p>
        3) Внутри конструктора this и super должны стоять выше всех других выражений, в самом начале, иначе компилятор выдаст сообщение об ошибке. Из чего следует, что <i>в одном конструкторе не может быть <b>одновременно</b> и this(), и super()</i>.
    </p>
    <br>
    <p>
        <b>Различия в super и this</b>
    </p>
    <p>
        1) Gеременная <i>this</i> ссылается на <b>текущий</b> экземпляр класса, в котором она используется, тогда как <i>super</i> — на текущий экземпляр <b>родительского</b> класса.
    </p>
    <p>
        2) Каждый конструктор при отсутствии явных вызовов других конструкторов неявно вызывает с помощью <b>super()</b> конструктор без аргументов родительского класса, при этом у вас всегда остается возможность явно вызвать любой другой конструктор с помощью либо this(), либо super().
    </p>

    <div class="title-2">
        16.3 Абстрактные классы. Интерфейсы.
    </div>

    <p>
        <b><i>Абстрактным</i></b> называется метод, который не имеет реализации в данном классе. После круглых скобок, где перечислены его аргументы, ставится не открывающая фигурная скобка, чтобы начать блок описания метода, а точка с запятой. То есть описание у абстрактноно метода отсутствует. Перед именем метода указывается при этом модификатор abstract.
    </p>

    <p>
        Чтобы исключить возможность использования абстрактного метода, в Java введено следующее требование: класс имеющий хоть один абстрактный метод обязан быть абстрактным классом.
    </p>

    <p>
        <b><i>Интерфейс</i></b> это консутрукция языка программирования Java, в рамках которой могут описываться только абстрактные публичные (abstract public) методы и статические константyst свойства (final static). То есть также, как и на основе абстрактных классов, на основе интерфейсов нельзя порождать объекты.
    </p>
    <p>
        Один интерфейс может быть наследником другого интерфейса.
    </p>
    <p>
        Классы могут реализовывать интерфейсы (т. е. получать от интерфейса список методов и описывать реализацю каждого из них), притом, что особенно важно, один класс может реализовывать сразу несколько интерфейсов.
    </p>
    <p>
        Перед описанием интерфейса указывается ключевое слово <b><i>interface</i></b>. Когда класс реализуемт интерфейс, то после его имени указывается ключевое слово implements и далее через запятую перечисляются имена тех интерфейсов, методы которых будут полностью описаны в классе.

    </p>

</BODY>
</HTML>