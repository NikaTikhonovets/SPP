<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//RU">
<HTML>
<HEAD>
<LINK rel=stylesheet href="../../css/styles.css" type=text/css>
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=windows-1251">
<META HTTP-EQUIV="Content-Language" CONTENT="ru">
<title>Тема №12</title>
<base target="_top">
</HEAD>
<BODY>
  <div class="title-1">
    Тема №12 "Массивы "
  </div>
  <div class="content">
    <div class="title-2">
        12.1 Объявление и инициализация массивов.
            </div>
        
        <p>
В языке Java массивы являются объектами, поэтому для создания массива как и для создания любого другого объекта используется <b>оператор new</b>. Тип массива может быть либо <i>примитивным </i>(int, double и т.д.) либо <i>ссылочным </i>(объекты).
</p>
<p>
<b>Объявление массива</b> в Java имеет следующий синтаксис, рассмотренный на примере типа Integer:
</p>
<br>
<p>
<i>Integer[] array = new Integer[10];</i>
</p>
<p>
Либо можно воспользоваться <i>альтернативным</i> синтаксисом:
</p>
<p>
<i>Integer array[] = new Integer[10];</i>
</p>
<p>
Пока элементы массива не проинициализивароны они содержат ссылку null. Поэтому при попытке обращения к элементу массива содержащему null произойдет<i> ошибка NullPointerException.</i> </p>
<p>
    <br>
Таким образом перед обращением к элементам массива они должны быть <b>проинициализированы.</b>
</p>
<p>
Инициализация массива можно проводить отдельно <i>после объявления</i>
</p>
<br>
<p><i>
Integer[] arr = new Integer[3];
</p>
<p>
arr[0] = new Integer(1);</p>
<p>
arr[1] = new Integer(5);</p>
<p>
arr[2] = new Integer(-5);</p>
</i>
<p>
<bt>
Так же возможна <i>явная инициализация</i> массива при объявлении
</p>
<p><bt>
    <i>
Integer[] arr = new Integer[]{new Integer(1), new Integer(5), new Integer(-5)};</i>
</p><br>
<p>
Или даже без использования оператора new:
</p>
<p><br>
    <i>
Integer[] arr = {new Integer(1), new Integer(5), new Integer(-5)};</i>
<br>
</p>
<p>
Следует отметить, что элементы массивов примитивных типов <b>по умолчанию инициализируются 0.</b>         </p>
<div class="title-2">
        12.2 Многомерные массивы. 
    </div>
        
            <p>
Поскольку в языке Java массивы являются объектами, то для объявления<b> многомерного массива</b>, нужно объявить массив элементами которого будут объекты в виде других массивов, т.е. нужно объявить массив массивов. <i>Синтаксис объявления</i> достаточно прост:
</p>
<p><i>
Integer[][] array; </i>
</p>
<p>
Или можно воспользоваться альтернативным синтаксисом:
</p>
<p><i>
Integer array[][];</i>
</p>
<p>
Обычно при объявлении массива сразу осуществляют и его инициализацию:
</p>
<p><i>
Integer array[][] = new Integer[5][10];</i>
</p>
<p>
В приведенном выше примере создается <i>двумерный массив </i>(матрица) 5 на 10. В данном случае мы получаем массив из 5 элементов, где каждый элемент является массивом из 10 целых чисел.
</p>
<p>
Как и в случае с обычными одномерными массивами, инициализацию можно проводить отдельно после объявления:
</p>
<br>
<p><i>
     Integer array[][] = new Integer[5][10];
     </p>
<p>
     array[0][0] = 1;
     </p>
<p>
     array[0][1] = 2;
     </p>
<p>
          . . . 
   </p>
<p>
     array[4][9] = 50;
</p></i>
<br>
<p>
Или сразу явно проинициализировать при помощи блока инициализации, как в приведенном ниже примере, где мы создаем массив 3 на 3:
</p>
<p><i>
    <br>
     Integer[][] array = {
     </p>
<p>
       {1, 2 ,3},
       </p>
<p>
       {4, 5 ,6},
       </p>
<p>
       {7, 8 ,9}
       </p>
<p>
     };</p>
     </i>

     <br>
<p>
        <div class="title-2">
        12.3
         Преобразование типов для массивов.
    </div>
        <p>
<b>Преобразование типов</b> - это тема, которая может показаться сложной начинающим программировать на Java. Однако, заверим Вас, на самом деле всё просто. Главное понять по каким законам происходит взаимодействие между переменными и помнить об этом при написании программ.
</p>
<p>
Автоматическое преобразование
Ну, что ж, давайте попробуем разобраться что такое "автоматическое преобразование".
</p>
<p>
Помните, когда мы рассматривали типы переменных (в статье "Переменные в Java. Создание переменной"), мы говорили, что переменная - это некоторый «контейнер», в котором может храниться значение для дальнейшего использования в программе. Также мы говорили о том, что каждый тип переменной имеет свой диапазон допустимых значений и объем занимаемой памяти
</p>
<p>
Приведение типов</p>
<p>
Другое дело если вы пытаетесь переложить что-то из большего контейнера в более маленький.
         </p>
        <div class="title-2">
        12.4 Ошибка ArrayStoreException.
    </div>
        <p>
Если попытаться записать в ячейку массива ссылку на объект неправильного типа, возникнет исключение <b>ArrayStoreException.</b>
</p>
<p>
Ниже мы создаем массив класса Object, предназначенный для хранения строк класса String:
</p>
<br>
<p><i>
Object szStr[] = new String[10];
    </p>
<p>
try
</p>
<p>
{
    </p>
<p>
  szStr[0] = new Character('*');</p>
<p>
}
</p>
<p>
catch(Exception ex)
</p>
<p>
{
    </p>
<p>
  System.out.println(ex.toString()); 
  </p>
<p>
}
</p>
</p></i>
<p>
    <br>
При попытке записать в первый элемент этого массива ссылку на объект класса Character возникает исключение:
</p>
<p>
<b>java.lang.ArrayStoreException</b>
</p>
<p>
         </p>
      <div class="title-2">
        12.5 Клонирование массивов
    </div>
    <p>
Один массив можно <i>скопировать</i> в другой, но при этом обе переменные будут ссылаться на один и тот же массив.
</p>
<p><i>
    <br>
int[] luckyNumbers = smailPrimes;
</p>
<p>
luckyNuimbers[5] = 12;</i> // Теперь элемент smailPrimes[5]также равен 12.
</p>
<p>
</p>
<p>
System.arraycopy(from, fromlndex, to, tolndex, count);
<br>
</p>
<p>

Массив to должен иметь достаточный размер, чтобы в нем поместились все копируемые элементы.
    </p>
   
       
</BODY>
</HTML>