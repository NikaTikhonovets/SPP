<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//RU">
<HTML>
<HEAD>
    <LINK rel=stylesheet href="../../css/styles.css" type=text/css>
    <META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=windows-1251">
    <META HTTP-EQUIV="Content-Language" CONTENT="ru">
    <title>Тема №7</title>
    <base target="_top">
</HEAD>
<BODY>
  <div class="title-1">
    Тема №7 "История создания и развития Java. Основные особенности платформы и ее эволюция"
</div>
<div class="content">
    
    <div class="title-2">
        7.1 История создания и развития Java
    </div>

    <p>
        История Java восходит к 1991 году, когда группа инженеров из компании Sun под руководством Патрика Нотона (Patrick Naughton) и члена Совета директоров (и разностороннего компьютерного волшебника) Джеймса Гослинга (James Gosling) занялась разработкой небольшого языка, который можно было бы использовать для программирования бытовых устройств, например, контроллеров для переключения каналов кабельного телевидения (cable TV switchboxes).    
        <p>
            В 1992 году в рамках проекта Green была выпущена первая продукция, названная
            "*7". Это было средство для чрезвычайно интеллектуального дистанционного управления. (Оно имело мощность рабочей станции SPARK, помещаясь в коробочке размером 6x4x4 дюйма.) К сожалению, ни одна из компаний— производителей электронной техники не заинтересовалась этим изобретением.
        </p>
        <p>
           Компания Sun выпустила первую версию языка Java в начале 1996 года. Через несколько месяцев после нее появилась версия Java 1.02. Люди быстро поняли, что версия Java 1.02 не подходит для разработки серьезных приложений. Конечно, эту версию можно применять для разработки Web-страниц с пляшущими человечками, однако в версии Java 1.02 ничего нельзя даже напечатать.
       </p>
       <p>
           Честно говоря, версия Java 1.02 была еще сырой. Ее преемница, версия Java 1.1, заполнила большинство зияющих провалов, намного улучшив возможность отражения и добавив новую модель событий для программирования графического пользовательского интерфейса. Несмотря на это, она все еще была довольно ограниченной.
       </p>
       <p>
        Выпуск версии Java 1.2 стал основной новостью конференции JavaOne в 1998 году. В новой версии слабые средства для создания графического пользовательского интерфейса и графических приложений были заменены сложным и масштабным инструментарием. Это был шаг вперед, к реализации лозунга "Write Once, Run Anywhere" ™ ("Один раз напиши— и везде выполняй"), выдвинутого при разработке предыдущих версий.
    </p>
    <p>
       Версии 1.3 и 1.4 стандартного издания пакета инструментальных средств намного совершеннее первоначального выпуска языка Java 2. Они обладают новыми возможностями и, разумеется, содержат намного меньше ошибок.
   </p>

   <div class="title-2">
    7.2 Платформа Java. Основные версии и продукты. Апплеты.
</div>
<p>
    Внутри Java существует несколько основных семейств технологий:
    <ul class="list">
        <li><b><i>Java SE</i></b> — Java Standard Edition, основное издание Java, содержит компиляторы, API, Java Runtime Environment; подходит для создания пользовательских приложений, в первую очередь — для настольных систем.
            <li><b><i>Java EE</i></b> — Java Enterprise Edition, представляет собой набор спецификаций для создания программного обеспечения уровня предприятия.
                <li><b><i>Java ME</i></b> — Java Micro Edition, создана для использования в устройствах, ограниченных по вычислительной мощности, например, в мобильных телефонах, КПК, встроенных системах;
                    <li><b><i>Java Card</i></b> — технология предоставляет безопасную среду для приложений, работающих на смарт-картах и других устройствах с очень ограниченным объёмом памяти и возможностями обработки
                    </ul>
                </p>
                <p>
                    Программы, написанные на Java, имеют репутацию более медленных и занимающих больше оперативной памяти, чем написанные на языке C. Тем не менее, скорость выполнения программ, написанных на языке Java, была существенно улучшена с выпуском в 1997—1998 годах так называемого JIT-компилятора в версии 1.1 в дополнение к другим особенностям языка для поддержки лучшего анализа кода (такие, как внутренние классы, класс StringBuffer, упрощенные логические вычисления и т. д.). Кроме того, была произведена оптимизация виртуальной машины Java — с 2000 года для этого используется виртуальная машина HotSpot. По состоянию на февраль 2012 года, код Java 7 приблизительно в 1.8 раза медленнее кода, написанного на языке Си.
                </p>
                <p>
                    Некоторые платформы предлагают аппаратную поддержку выполнения для Java[источник не указан 2366 дней]. К примеру, микроконтроллеры, выполняющие код Java на аппаратном обеспечении вместо программной JVM, а также основанные на ARM процессоры, которые поддерживают выполнение байткода Java через опцию Jazelle.
                </p>
                <div class="title-2">
                    7.3 Свойства языка Java. Процесс создания программ на Java
                </div>
                <p>Основные возможности:
                    <ul class="list">
                        <br>
                        <li>автоматическое управление памятью;
                           <li>расширенные возможности обработки исключительных ситуаций;
                               <li>богатый набор средств фильтрации ввода-вывода;
                                   <li>набор стандартных коллекций: массив, список, стек и т. п.;
                                       <li>наличие простых средств создания сетевых приложений (в том числе с использованием протокола RMI);
                                           <li>наличие классов, позволяющих выполнять HTTP-запросы и обрабатывать ответы;
                                               <li>встроенные в язык средства создания многопоточных приложений, которые потом были портированы на многие языки (например, python);
                                                   <li> унифицированный доступ к базам данных:
                                                       <li>на уровне отдельных SQL-запросов — на основе JDBC, SQLJ;
                                                           <li>на уровне концепции объектов, обладающих способностью к хранению в базе данных — на основе Java Data Objects (англ.) и Java Persistence API;
                                                               <li>поддержка обобщений (начиная с версии 1.5);
                                                                   <li>поддержка лямбд, замыканий, встроенные возможности функционального программирования;
                                                                   </p>
                                                                   
                                                                   
                                                               </BODY>
                                                           </HTML>