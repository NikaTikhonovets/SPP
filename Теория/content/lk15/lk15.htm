<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//RU">
<HTML>
<HEAD>
    <LINK rel=stylesheet href="../../css/styles.css" type=text/css>
    <META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=windows-1251">
    <META HTTP-EQUIV="Content-Language" CONTENT="ru">
    <title>Тема №15</title>
    <base target="_top">
</HEAD>
<BODY>
  <div class="title-1">
    Тема №15 "Объявление классов в Java"
</div>
<div class="content">

    <div class="title-2">
        15.1 Модификаторы доступа. 
    </div>
    <p>
        В Java существуют следующие модификаторы доступа:
        <ul class="list">
            <li><b>private</b>: члены класса доступны только внутри класса;</li>
            <li><b>default</b> (package-private) (модификатор, по-умолчанию): члены класса видны внутри пакета (если класс будет так объявлен он будет доступен только внутри пакета);</li>
            <li><b>protected</b>: члены класса доступны внутри пакета и в наследниках;</li>
            <li><b>public</b>: члены класс доступны всем;</li>
        </ul>
    </p>
    <p>
        Последовательность модификаторов по убыванию уровня закрытости:<i> private, default ,protected, public).</i>
    </p>
    <p>
        <b><i>Модификатор доступа по умолчанию</i></b> — означает, что мы явно не объявляем модификатор доступа в Java для класса, поля, метода и т.д.
    </p>
    <p>
        Переменная или метод, объявленные без модификатора контроля доступа доступны для любого другого класса в том же пакете. Поля в интерфейсе неявно являются public, static, final, а методы в интерфейсе по умолчанию являются public.
    </p>
    <div class="title-2">
        15.2 Объявление классов. 
    </div>
    <p>
        Объявление класса состоит из заголовка и тела класса.
    </p>
    <p>
        <b>Заголовок класса</b>
        Вначале указываются модификаторы класса. Модификаторы доступа для класса уже обсуждались. Допустимым является public, либо его отсутствие - доступ по умолчанию.
    </p>
    <p>
        Класс может быть объявлен как <b><i>final</i></b>. В этом случае не допускается создание наследников такого класса. На своей ветке наследования он является последним. Класс String и классы-обертки, например, являются final-классами.
    </p>
    <p>
        После списка модификаторов указывается ключевое слово <b><i>class</i></b>, а затем имя класса - корректный Java-идентификатор.Таким образом, кратчайшим объявлением класса может являться такой модуль компиляции:

        <i>

            class A {}

        </i>
    </p>
    <br>
    <p>
        <b>Тело класса</b> может содержать объявление элементов <i>(members)</i> класса:
        <ul class="list">
            <li>полей;</li>
            <li>методов;</li>
            <li>внутренних типов (классов и интерфейсов);</li>
            <li>конструкторов;</li>
            <li>инициализаторов;</li>
            <li>статических инициализаторов.</li>
        </ul>
    </p>
    <div class="title-2">
        15.3 Дополнительные свойства классов: метод main, параметры методов, перегруженные методы
    </div>

    <p>
        Итак, виртуальная машина реализуется приложением операционной системы и запускается по обычным правилам. Программа, написанная на Java, является набором классов. Понятно, что требуется некая входная точка, с которой должно начинаться выполнение приложения.
    </p>
    <p>
        Такой входной точкой, по аналогии с языками C/C++, является метод <b><i>main().</i></b>

    </p>
    <br>
    <p> Пример его объявления:
    </p>
    <i>
        <p>
            public static void main(String[] args) { }
        </p>
        <br>
    </i>
    <p>
        Модификатор <b><i>static</i></b> в этой главе не рассматривался и будет изучен позже. Он позволяет вызвать метод <i>main(),</i> не создавая объектов. Метод не возвращает никакого значения, хотя в C есть возможность указать код возврата из программы. В Java для этой цели есть метод <i>System.exit(),</i> который закрывает виртуальную машину и имеет аргумент типа <i>int.</i>
    </p>
    <p>
        Аргументом метода <b><i>main()</i></b> является массив строк. Он заполняется дополнительными параметрами, которые были указаны при вызове метода.

    </p>
    <br>
    <p>
      Методы могут принимать <i>произвольное</i> число параметров:  
      <i>
      </p>
      <p>
        static int getSum(int x, int y){
    </p>
    <p>
        return x+y;
    </p>
    <p>
    }
</p>
</i>
<br>
<p>
 В программе мы можем использовать методы с одним и тем же именем, но с разными типами и/или количеством параметров. Такой механизм называется<b> перегрузкой методов.  </b>
</p>


</BODY>
</HTML>