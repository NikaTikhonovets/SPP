<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//RU">
<HTML>

<HEAD>
    <LINK rel=stylesheet href="../../css/styles.css" type=text/css>
    <META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=windows-1251">
    <META HTTP-EQUIV="Content-Language" CONTENT="ru">
    <title>Тема №34</title>
    <base target="_top">
</HEAD>

<BODY>
    <div class="title-1">
        Тема №34 "JavaScript"
    </div>
    <div class="content">
        <p>
            <b>JavaScript</b> — мультипарадигменный язык программирования. Поддерживает объектно-ориентированный, императивный
            и функциональный стили. Является реализацией языка ECMAScript.
        </p>
        <p>
            Основные архитектурные черты: динамическая типизация, слабая типизация, автоматическое управление памятью, прототипное программирование,
            функции как объекты первого класса.
        </p>
        <p>
            JavaScript является объектно-ориентированным языком, но используемое в языке прототипирование обуславливает отличия в работе
            с объектами по сравнению с традиционными класс-ориентированными языками. Кроме того, JavaScript имеет ряд свойств,
            присущих функциональным языкам — функции как объекты первого класса, объекты как списки, карринг, анонимные функции,
            замыкания — что придаёт языку дополнительную гибкость.
        </p>
        <br>
        <p>
            Несмотря на схожий с Си синтаксис, JavaScript по сравнению с языком Си имеет коренные отличия:
            <ul class="list">
                <li>объекты с возможностью интроспекции;</li>
                <li>функции как объекты первого класса;</li>
                <li>автоматическое приведение типов;</li>
                <li>автоматическая сборка мусора;</li>
                <li>анонимные функции.</li>
            </ul>
        </p>
        <p>
            <b>Объявление переменной</b> с помощью var:
        </p>
        <p>
            var message;
        </p>
        <p>
            message = 'Hello';
        </p>
        <p>
            alert(message);
        </p>
        <br>
        <p>
            <b>Область видимости:</b> Глобальная переменная доступна везде, локальная — только в текущей области видимости.
        </p>
        <br>
        <p>
            <b>Функция</b> создаётся выражением, начинающимся с ключевого слова
            <i>function</i>. У функций есть набор параметров и тело, содержащее инструкции, которые необходимо выполнить при
            вызове функции. Тело функции всегда заключают в фигурные скобки, даже если оно состоит из одной инструкции. В
            js функции являются полноценными объектами встроенного класс Function. Именно поэтому их можно присваивать переменным,передавать
            и у них есть свойства, которые доступны внутри функции, так что их можно использовать как статические переменные.
        </p>
        <br>
        <p>
            <b>ООП:</b> В JavaScript нет классов. Объект в javascript представляет собой обычный ассоциативный массив или, иначе
            говоря, "хэш". Он хранит любые соответствия "ключ => значение" и имеет несколько стандартных методов. Метод объекта
            в javascript ­- это просто функция, которая добавлена в ассоциативный массив.
        </p>
        <br>
        <p>
            Директива
            <b>use strict</b> (нужна, чтобы перевести код в режим полного соответствия современному стандарту). Директива выглядит
            как строка "use strict"; или 'use strict'; и ставится в начале скрипта.

        </p>
        <br>
        <p>
            <b>Prototype:</b> Все объекты в javascript наследуют от Object, и потому имеют свойство prototype. Как правило,
            свойство prototype используется для предоставления базового набора функциональных возможностей классу объектов.
            Новые экземпляры объекта "наследуют" поведение прототипа, присвоенного этому объекту.
        </p>
        <br>
        <p>
            Javascript поддерживает два вида структуры
            <b>"массив"</b>:
            <ul class="list">
                <li>
                    Ассоциативный массив (хеш), где данные хранятся по произвольному ключу.
                </li>
                <li>Числовой массив Array, где данные хранятся по номерам. </li>
            </ul>
        </p>
        <p>
            Метод «arr.
            <b>forEach</b>(callback[, thisArg])» используется для перебора массива.
        </p>
        <p>
            Он для каждого элемента массива вызывает функцию callback.
        </p>
        <br>
        <p>
            Метод «arr.
            <b>every</b>(callback[, thisArg])» возвращает true, если вызов callback вернёт true для каждого элемента arr.
        </p>
        <p>
            Метод «arr.
            <b>some</b>(callback[, thisArg])» возвращает true, если вызов callback вернёт true для какого­-нибудь элемента arr.
        </p>
        <p>
            Метод «arr.
            <b>map</b>(callback[, thisArg])» используется для трансформации массива.
        </p>
        <p>
            Метод «arr.
            <b>filter</b>(callback[, thisArg])» используется для фильтрации массива через функцию. Он создаёт новый массив,
            в который войдут только те элементы arr, для которых вызов callback(item, i, arr) возвратит true.
        </p>
        <p>
            Метод «arr.
            <b>reduce</b>(callback[, initialValue])» используется для последовательной обработки каждого элемента массива с
            сохранением промежуточного результата. Метод reduce используется для вычисления на основе массива какого­-либо
            единого значения, иначе говорят «для свёртки массива». Он применяет функцию callback по очереди к каждому элементу
            массива слева направо, сохраняя при этом промежуточный результат.
        </p>
        <br>
        <p>
            <b>This:</b> В глобальном контексте выполнения (за пределами каких-­либо функций), this ссылается на глобальный
            объект вне зависимости от использования в строгом или нестрогом режиме. В пределах функции значение this зависит
            от того, каким образом вызвана функция.
        </p>
    </div>
</BODY>
</HTML>