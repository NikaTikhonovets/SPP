<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//RU">
<HTML>
<HEAD>
    <LINK rel=stylesheet href="../../css/styles.css" type=text/css>
    <META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=windows-1251">
    <META HTTP-EQUIV="Content-Language" CONTENT="ru">
    <title>Тема №13</title>
    <base target="_top">
</HEAD>
<BODY>
  <div class="title-1">
    Тема №13 "Преобразование типов"
</div>
<div class="content">

    <div class="title-2">
        13.1 Виды преобразований.
    </div>
    <p>
        В Java предусмотрено семь видов приведений:
        <ul class="list">
            <li><b>тождественное </b><i>(identity)</i></li>
            <li><b>расширение примитивного типа</b> <i>(widening primitive);</i></li>
            <li><b>сужение примитивного типа </b><i>(narrowing primitive);</i></li>
            <li><b>расширение объектного типа </b><i>(widening reference);</i></li>
            <li><b>сужение объектного типа</b> <i>(narrowing reference);</i></li>
            <li><b>преобразование к строке </b><i>(String);</i></li>
            <li><b>запрещенные преобразования </b><i>(forbidden).</i></li>
        </ul>
    </p>
    <div class="title-2">
        13.2  Тождественное преобразование.
    </div>
    <p>
        Самым <i>простым</i> является <b>тождественное преобразование</b>. В Java преобразование выражения любого типа к точно такому же типу всегда допустимо и успешно выполняется.
        Это важно для возможности утверждать с теоретической точки зрения, что любой тип в Java может участвовать в преобразовании, хотя бы в тождественном.
    </p>
    <div class="title-2">
        13.3 Преобразование примитивных типов.
    </div>
    <p>
        Для простых типов расширение означает, что осуществляется <b>переход от менее емкого типа к более ёмкому</b>. Например, от типа <i>byte</i> (длина 1 байт) к типу <i>int</i> (длина 4 байта). Такие преобразование безопасны в том смысле, что новый тип всегда гарантировано вмещает в себя все данные, которые хранились в старом типе, и таким образом не происходит потери данных.
    </p>
    <p>
        Следующие 19 преобразований являются расширяющими:
        <ul class="list">
            <li>От <i>byte к short, int, long, float, double</i></li>
            <li>От <i>short к int, long, float, double</i></li>
            <li>От <i>char к int, long, float, double</i></li>
            <li>От <i>int к long, float, double</i></li>
            <li>От <i>long к float, double</i></li>
            <li>От <i>float к double</i></li>
        </ul>

    </p>
    <div class="title-2">
        13.4 Преобразование ссылочных типов.
    </div>
    <p>
        Преобразование объектных типов лучше всего иллюстрируется с помощью дерева наследования. Рассмотрим небольшой пример наследования:
    </p>
    <i>
        <p>
            class Parent {
        </p>
        <p>
         int x;
     </p>
     <p>
     }
 </p>
 <p>
    class ChildY extends Parent {
</p>
<p>
 int y;
</p>
<p>
}
</p>
<p>
    class ChildZ extends Parent {
</p>
<p>
 int z;
</p>
<p>
}
</p>
</i>
<p>
    В каждом классе объявлено поле с уникальным именем. Будем рассматривать это поле как пример набора уникальных свойств, присущи некоторому объектному типу.
    Объекты класса Parent обладают только одним полем x, а значит, только ссылки типа Parent могут ссылаться на такие объекты. Объекты класса ChildY обладают полем y и полем x, полученным по наследству от класса Parent. Стало быть, на такие объекты могут указывать ссылки типа ChildY  или Parent.
</p>
<p>

</p>
<div class="title-2">
    13.5 Запрещенные преобразования. 
</div>
<p>
    Не все переходы между произвольными типами допустимы. Например, к <i><b>запрещенным преобразованиям</b></i> относятся: 
    <ul class="list">
        <li>переходы от любого ссылочного типа к примитивному и наоборот (кроме преобразования к строке), </li>
        <li>boolean можно привести только к этому типу или же к строке.  </li>
        <li>классы находящиеся на соседних ветвях дерева наследования. </li>
    </ul>
</p>
<p>
 Этим список <i>запрещенных преобразований</i> не исчерпывается. Он довольно широк и в тоже время все варианты достаточно очевидны, поэтому подробно рассматриваться не будут. Желающие могут получить полную информацию из спецификации.
 Разумеется, попытка осуществить запрещенное преобразование вызовет ошибку.
</p>
<div class="title-2">
    13.6 Применение приведений
</div>
<p>
   Ситуации <b>применения преобразования</b> типов могут быть сгруппированы следующим образом:
   Присвоение значений переменным <i>(assignment)</i>. Не все переходы допустимы при таком преобразовании – ограничения выбраны таким образом, чтобы не могла возникнуть исключительная ситуация.
</p>
<p>
 <b> Вызов метода</b>. Это преобразование применяется к аргументам вызываемого метода или конструктора. Такое приведение никогда не порождает ошибок. Так же приведение осуществляется при возвращении значения метода.
</p>
<p>
    <b>Явное приведение.</b> В этом случае явно указывается, к какому типу требуется привести исходное значение.
</p>
<p>
    <b>Числовое расширение.</b> Числовые операции могут потребовать изменения типа аргумента(ов). Это преобразование имеет особое название – расширенное, так как выбор целевого типа может зависеть не только от исходного значения, но и от второго аргумента операции.
</p>

</BODY>
</HTML>