<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//RU">
<HTML>
<HEAD>
  <LINK rel=stylesheet href="../../css/styles.css" type=text/css>
  <META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=windows-1251">
  <META HTTP-EQUIV="Content-Language" CONTENT="ru">
  <title>Тема №10</title>
  <base target="_top">
</HEAD>
<BODY>
  <div class="title-1">
    Тема №10 "Операторы и структура кода"
  </div>
  <div class="content">
    <div class="title-2">
      10.1 Нормальное и прерванное выполнение операторов
    </div>

    <p>
     Последовательность выполнения операторов может быть <b>непрерывной</b>, а может и <b>прерываться</b> (при возникновении определенных условий). Выполнение оператора может быть прервано, если в потоке вычислений<i> будут обнаружены операторы</i>

     <ul class="list">
      <li>break</li>
      <li>continue</li>
      <li>return</li>
    </ul>
  </p>
  <p>
    Тогда управление будет передано в другое место.
  </p>
  <p>
    Нормальное выполнение оператора может быть прервано также при <i>возникновении исключительных ситуаций</i>.Явное возбуждение исключительной ситуации с помощью оператора throw также прерывает нормальное выполнение оператора и передает управление выполнением программы (далее просто управление) в другое место.
  </p>
  <p>
    Прерывание нормального исполнения всегда вызывается <i>определенной причиной</i>. Приведем список таких причин:
    <ul class="list">
      <li>break (без указания метки );</li>
      <li>break (с указанием метки );</li>
      <li>continue (без указания метки );</li>
      <li>continue (с указанием метки );</li>
      <li>return (с возвратом значения);</li>
      <li>return (без возврата значения);</li>
      <li>throw с указанием объекта Throwable, а также все исключения, вызываемые виртуальной машиной Java.</li>
    </ul>
  </p>
  <p>
    Выражения могут завершаться<b> нормально</b> и преждевременно (аварийно). В данном случае термин "аварийно" вполне применим, т.к. причиной необычной последовательности выполнения выражения может быть только возникновение исключительной ситуации.
  </p>
  <p>
    Если в операторе содержится выражение, то в случае его аварийного завершения выполнение оператора тоже будет завершено преждевременно (т.е. нормальный ход выполнения оператора будет нарушен).
  </p>
  <p>
    В том случае, если в операторе имеется вложенный оператор и его завершение происходит ненормально, то так же ненормально завершается оператор, содержащий вложенный (в некоторых случаях это не так, что будет оговариваться особо).
  </p>


  <div class="title-2">
    10.2 Блоки и локальные переменные. Метки
  </div>

  <p>
    <b><i> Блок </i></b>- это последовательность операторов, объявлений локальных классов или локальных переменных, заключенных в скобки. Область видимости локальных переменных и классов ограничена блоком, в котором они определены.
  </p>
  <p>
    Операторы в блоке выполняются<i> слева направо, сверху вниз</i>. Если все операторы (выражения) в блоке выполняются <i>нормально</i>, то и весь блок выполняется <i>нормально</i>. Если какой-либо оператор (выражение) завершается <i>ненормально</i>, то и весь блок завершается <i>ненормально</i>.
  </p>
  <p>
    Любой оператор, или блок, может иметь <b>метку</b>. Метку можно указывать в качестве параметра для операторов <i><b>break и continue</b></i>. Область видимости метки ограничивается оператором, или блоком, к которому она относится.
  </p>
  <p>
    Традиционно использование меток <i>не рекомендуется</i>, особенно в объектно-ориентированных языках, поскольку серьезно усложняет понимание порядка выполнения кода, а значит, и его тестирование и отладку. Для <i>Java этот запрет можно считать не столь строгим</i>, поскольку самый опасный оператор goto отсутствует. В некоторых ситуациях (как в рассмотренном примере с вложенными циклами) использование меток вполне оправданно, но, конечно, их применение следует ограничивать лишь самыми необходимыми случаями.
  </p>
  <div class="title-2">
    10.3 Условный оператор if. 
  </div>

  <p>
    Пожалуй, наиболее распространенной конструкцией в Java, как и в любом другом структурном языке программирования, является <b>оператор условного перехода</b>.
  </p>
  <p>
    <b>В общем случае конструкция выглядит так:</b>
  </p>
  <p><i>
    if (логическое выражение) выражение или блок 1
  </i></p>
  <p><i>
    else выражение или блок 2
  </i></p>
  <p>
    <i>Логическое выражение</i> может быть любой языковой конструкцией, которая возвращает булевский результат. Отметим отличие от языка C, в котором в качестве логического выражения могут использоваться различные типы данных, где отличное от нуля выражение трактуется как истинное значение, а ноль - как ложное. В Java возможно использование только логических выражений.
  </p>
  <p>
    Если логическое выражение принимает значение "истина", то выполняется выражение или блок 1, в противном случае - выражение или блок 2. Вторая часть оператора ( else ) не является обязательной и может быть опущена. Т.е. конструкция <i>if(x == 5) System.out.println("Five")</i> вполне допустима.
  </p>
  <p>
    Операторы <b>if-else</b> могут каскадироваться.
  </p>
  <p>
    String test = "smb";
  </p>
  <p>
    if( test.equals("value1") {
  </p>
  <p>
    ...
  </p>
  <p>
  } else if (test.equals("value2") {
</p>
<p>
  ...
</p>
<p>
} else if (test.equals("value3") {
</p>
<p>
  ...
</p>
<p>
} else {
</p>
<p>
  ...
</p>
<p>
}
</p>
<p>
  Следует помнить, что оператор<b> else </b>относится к ближайшему к нему оператору<b> if</b>. В данном случае последнее условие else будет выполняться, только если не выполнено предыдущее. Заключительная конструкция else относится к самому последнему условию if и будет выполнена только в том случае, если ни одно из вышеперечисленных условий не будет истинным. Если хотя бы одно из условий выполнено, то все последующие выполняться не будут.
</p>
<div class="title-2">
  10.4 Оператор выбора switch.
</div>

<p>
 Оператор <b>switch()</b> удобно использовать в случае необходимости множественного выбора. Выбор осуществляется на основе целочисленного значения.
</p>
<p>
  <b>Структура оператора:</b>
</p>
<p>
  switch(int value) {
</p>
<p>
  case const1:
</p>
<p>
  выражение или блок
</p>
<p>
  case const2:
</p>
<p>
  выражение или блок
</p>
<p>
  case constn:
</p>
<p>
  выражение или блок
</p>
<p>
  default:
</p>
<p>
  выражение или блок
</p>
<p>
}
</p>
<p>
  Причем, фраза<b> default </b>не является обязательной.
</p>
<p>
  В качестве параметра <i>switch</i> может использоваться переменная типа <i>byte, short, int, char или выражение</i>. Выражение должно в конечном итоге возвращать параметр одного из указанных ранее типов. В операторе switch не могут применяться значения примитивного типа long и ссылочных типов Long, String, Integer, Byte и т.д.
</p>
<p>
  При выполнении оператора switch производится последовательное сравнение значения x с константами, указанными после case, и в случае совпадения выполняется выражение следующее за этим условием. Если выражение выполнено нормально и нет преждевременного его завершения, то производится выполнение для последующих case. Если же выражение, следующее за case, завершилось ненормально, то будет прекращено выполнение всего оператора switch.
</p>
<p>
  Если не выполнен ни один оператор case, то выполнится оператор default, если он имеется в данном switch. Если оператора default нет и ни одно из условий case не выполнено, то ни одно из выражений switch также выполнено не будет.
</p>
<p>
  После оператора case должен следовать литерал, который может быть интерпретирован как 32-битовое целое значение. Здесь не могут применяться выражения и переменные, если они не являются <i>final static.</i>
</p>
<div class="title-2">
  10.5  Операторы для управления циклами.
</div>
<p>
 В языке Java имеется <i>три основных конструкции<b> управления циклами:</b></i>
 <ul class="list">
  <li>цикл while ;</li>
  <li>цикл do ;</li>
  <li>цикл for.</li>
  <li>Цикл while</li>
</ul>
</p>
<p>
  Основная форма<b> цикла while</b> может быть представлена так:
</p>
<i>
  <p>
    <b>while(логическое выражение)</b>
  </p>
  <p>
    повторяющееся выражение, или блок;
  </p>
</i>
<p>
  В данной языковой конструкции повторяющееся выражение, или блок будет исполняться до тех пор, пока логическое выражение будет иметь истинное значение. Этот многократно исполняемый блок называют телом цикла
</p>
<p>
  <b>Цикл do</b></p><p>
    Основная форма <b>цикла do</b> имеет следующий вид:
  </p>
  <i>
    <p>
      do
    </p>
    <p>
      повторяющееся выражение или блок;
    </p>
    <p>
      while(логическое выражение)
    </p>
  </i>
  <p>
    Цикл do будет выполняться до тех пор, пока логическое выражение будет истинным. В отличие от цикла while, этот цикл будет выполнен, как минимум, один раз.
  </p>
  <p>
    <b>Цикл for</b>
  </p>
  <p>
    Довольно часто бывает необходимо изменять значение какой-либо переменной в заданном диапазоне и выполнять повторяющуюся последовательность операторов с использованием этой переменной. Для выполнения такой последовательности действий как нельзя лучше подходит конструкция цикла for.
  </p>
  <p>
    Основная форма<b> цикла for</b> выглядит следующим образом:
  </p>
  <i>
    <p>
      for(выражение инициализации; условие;
    </p>
    <p>
      выражение обновления)
    </p>
    <p>
      повторяющееся выражение или блок;
    </p>
  </i>
  <p>
    Ключевыми элементами данной языковой конструкции являются предложения, заключенные в круглые скобки и разделенные точкой с запятой.
  </p>
  <p>
    Выражение инициализации выполняется до начала выполнения тела цикла. Чаще всего используется как некое стартовое условие (инициализация, или объявление переменной).
  </p>
  <p>
    Условие должно быть логическим выражением и трактуется точно так же, как логическое выражение в цикле while(). Тело цикла выполняется до тех пор, пока логическое выражение истинно. Как и в случае с циклом while(), тело цикла может не исполниться ни разу. Это происходит, если логическое выражение принимает значение "ложь" до начала выполнения цикла.
  </p>
  <div class="title-2">
    10.6  Операторы break и continue.
  </div>
  <p>
    <b>  Операторы break и continue</b>
  </p>
  <p>
    В некоторых случаях требуется изменить ход выполнения программы. В традиционных языках программирования для этих целей применяется<i> оператор goto</i>, однако в Java он не поддерживается. Для этих целей применяются операторы break и continue.
  </p>
  <p>
    <b>Оператор continue</b>
  </p>
  <p>
    Оператор<i> continue</i> может использоваться только в циклах <i>while, do, for</i>. Если в потоке вычислений встречается оператор continue, то выполнение текущей последовательности операторов (выражений) должно быть прекращено и управление будет передано на начало блока, содержащего этот оператор.
  </p>
  <p>
    <b>
    Оператор break</b>
  </p>
  <p>
    Этот оператор, как и оператор continue, изменяет последовательность выполнения, но не возвращает исполнение к началу цикла, а прерывает его.
  </p>

  <div class="title-2">
    10.7 Именованные блоки. Оператор return
  </div>

  <p>
    <b>Именованные блоки</b>
  </p>
  <p>
    В реальной практике достаточно часто используются вложенные циклы. Соответственно, может возникнуть ситуация, когда из вложенного цикла нужно прервать внешний. Простое использование break или continue не решает этой задачи, однако в Java можно именовать блок кода и явно указать операторам, к какому из них относится выполняемое действие. Делается это путем присвоения метки операторам do, while, for.
  </p>
  <p>
    <b>Метка</b> - это любая допустимая в данном контексте лексема, оканчивающаяся двоеточием.
  </p>
  <p>
    <b>Оператор return</b>
  </p>
  <p>
    Этот оператор предназначен для возврата управления из вызываемого метода в вызывающий. Если в последовательности операторов выполняется return, то управление немедленно (если это не оговорено особо) передается в вызывающий метод. Оператор return может иметь, а может и не иметь аргументов. Если метод не возвращает значений (объявлен как void ), то в этом и только этом случае выражение return применяется без аргументов. Если возвращаемое значение есть, то return обязательно должен применяться с аргументом, чье значение и будет возвращено.
  </p>


</BODY>
</HTML>