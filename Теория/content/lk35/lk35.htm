<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//RU">
<HTML>

<HEAD>
    <LINK rel=stylesheet href="../../css/styles.css" type=text/css>
    <META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=windows-1251">
    <META HTTP-EQUIV="Content-Language" CONTENT="ru">
    <title>Тема №35</title>
    <base target="_top">
</HEAD>

<BODY>
    <div class="title-1">
        Тема №35 "jQuery"
    </div>
    <div class="content">
        <p>
            <b>jQuery</b> — библиотека JavaScript, фокусирующаяся на взаимодействии JavaScript и HTML. Библиотека jQuery помогает
            легко получать доступ к любому элементу DOM, обращаться к атрибутам и содержимому элементов DOM, манипулировать
            ими. Также библиотека jQuery предоставляет удобный API для работы с AJAX.
        </p>
        <br>
        <p>
            Возможности:
            <ul class="list">
                <li>Движок кросс-браузерных CSS-селекторов Sizzle, выделившийся в отдельный проект;</li>
                <li>Переход по дереву DOM, включая поддержку XPath как плагина;</li>
                <li>События;</li>
                <li>Визуальные эффекты;</li>
                <li>AJAX-дополнения;</li>
                <li>JavaScript-плагины.</li>
            </ul>
        </p>
        <p>
            <b>Базовые селекторы</b>
        </p>
        <br>
        <ul class="list">
            <li>
                <p>
                    <b>[attribute ~= value]</b>
                    <p>Соответствует всем элементам с атрибутом attribute, содержащим слово value (именно слово, а не просто
                        подстроку. То есть вхождение value должно содержать с обеих сторон разделители: пробелы или начало/конец
                        строки). Если value состоит из нескольких слов, между которыми есть пробелы, то нужно заключать value
                        в кавычки. Если value не содержит пробелов — кавычки не обязательны.</p>
                </p>
            </li>
            <li>
                <p>
                    <b>[attribute *= value]</b>
                    <p>Соответствует всем элементам, у которых значение атрибута attribute содержит value. Если value состоит
                        из нескольких слов, между которыми есть пробелы, то нужно заключать value в кавычки. Если value не
                        содержит пробелов — кавычки не обязательны.</p>
                </p>
            </li>
            <li>
                <p>
                    <b>[attribute $= value]</b>
                    <p>Соответствует всем элементам, у которых значение атрибута attribute заканчивается на value. Если value
                        состоит из нескольких слов, между которыми есть пробелы, то нужно заключать value в кавычки. Если
                        value не содержит пробелов — кавычки не обязательны.</p>
                </p>
            </li>
            <li>
                <p>
                    <b>:has(selector)</b>
                    <p>Соответствует элементам, которые обладают потомками, удовлетворяющими селектору selector.</p>
                </p>
            </li>
            <li>
                <p>
                    <b>:not(selector)</b>
                    <p>Исключает элементы удовлетворяющие селектору selector из найденных элементов.</p>
                </p>
            </li>
            <li>
                <p>
                    <b>:hidden</b>
                    <p>Соответствует всем скрытым элементам страницы. Элементы с css-­свойством visibility равным hidden, а
                        также элементы с нулевой прозрачностью, считаются видимыми, поскольку они продолжают занимать место
                        на странице. Если на элементе выполняется анимация, делающая его невидимым, то статус «скрытости»
                        он получит сразу после ее завершения. </p>
                </p>
            </li>
            <li>
                <p>
                    <b>:first</b>
                    <p>Соответствует первому элементу, из всех выбранных с помощью селектора someSelector.
                    </p>
                </p>
            </li>
            <li>
                <p>
                    <b>:odd</b>
                    <p>Соответствует элементам с нечетными номерами позиций, в наборе выбранных элементов.
                    </p>
                </p>
            </li>
            <li>
                <p>
                    <b>:even</b>
                    <p>Соответствует элементам с четными номерами позиций, в наборе выбранных элементов.
                    </p>
                </p>
            </li>
            <li>
                <p>
                    <b>:last­child</b>
                    <p>Соответствует элементам, которые идут последними в своих непосредственных предках.
                    </p>
                </p>
            </li>
            <li>
                <p>
                    <b>:only­child</b>
                    <p>Соответствует элементам, которые являются единственными в своих непосредственных предках.
                    </p>
                </p>
            </li>
            <li>
                <p>
                    <b>:eq(index)</b>
                    <p>Соответствует элементу, занимающему позицию под номером index, среди уже выбранных с помощью селектора
                        someSelector элементов. Нумерация элементов начинается с 0.
                    </p>
                </p>
            </li>
            <li>
                <p>
                    <b>:gt(n)</b>
                    <p>Фильтрует набор выбранных элементов, оставляя только те, индекс которых превышает n. Не забывайте, что
                        индексирование начинается с 0.
                    </p>
                </p>
            </li>
            <li>
                <p>
                    <b>:lt(n)</b>
                    <p>Фильтрует набор выбранных элементов, оставляя только те, индекс которых меньше n. Не забывайте, что индексирование
                        начинается с 0.
                    </p>
                </p>
            </li>
            <li>
                <p>
                    <b>:disabled</b>
                    <p>Соответствует всем заблокированным элементам формы (элементы с атрибутом disabled).
                    </p>
                </p>
            </li>
            <li>
                <p>
                    <b>:selected</b>
                    <p>Соответствует всем элементам со статусом selected. Для поиска выбранных checkbox и radio-элементов, этот
                        селектор НЕ подойдет.
                    </p>
                </p>
            </li>
            <li>
                <p>
                    <b>:visible</b>
                    <p>Соответствует всем видимым элементам страницы.
                    </p>
                </p>
            </li>
        </ul>
        <p>
            <b>Создание новых элементов</b>
        </p>
        <br>
        <p>
            Метод Append предназначен для создания и вставки нового элемента в уже существующий контекст. Технически, новый элемент вставляется
            прямо перед закрывающимся тегом родителя.
        </p>
        <p>
            <i>Примеры:</i>
        </p>
        <p>
            $('body').append('&lt;div&gt;');
        </p>
        <p>
            $('body').append('&lt;p&gt;This is the text in new element.&lt;p&gt;');
        </p>
        <br>
        <p>
            <b>Цепочки вызовов</b>
        </p>
        <br>
        <p>
            Цепочкой методов называют последовательный вызов нескольких методов jQuery.
        </p>
        <p>
            <i>Пример:</i>
        </p>
        <p>
            $(&quot;div&quot;).parent().css(&quot;heigth&quot; , &quot;10px&quot;).fadeTo(0,0.5 ).addClass(&quot;divOwner&quot;);
        </p>
        <br>
        <p>
            <b>Работа со стилями элементов. Динамическое создание и удаление элементов из документа</b>
        </p>
        <br>
        <ul class="list">
            <li>
                <p>
                    <b>.css()</b>
                    <p>Возвращает или изменяет значения css­-величин у выбранных элементов страницы.</p>
                </p>
            </li>
            <li>
                <p>
                    <b>.width()</b>
                    <p>Функция возвращают ширину элемента без учета отступов и толщины рамки. Кроме этого, с помощью width(),
                        можно установить новое значение ширины.</p>
                </p>
            </li>
            <li>
                <p>
                    <b>.height()</b>
                    <p>Функция возвращает высоту элемента без учета отступов и толщины рамки. Кроме этого, с помощью height(),
                        можно установить новое значение высоты.</p>
                </p>
            </li>
            <li>
                <p>
                    <b>.addClass()</b>
                    <p>Добавляет класс(ы) выбранным элементам страницы. Если из этих элементов некоторые уже принадлежат каким­-то
                        классам, то новый (новые) класс добавится к существующим, а не заменит их.
                    </p>
                </p>
            </li>
            <li>
                <p>
                    <b>.removeClass()</b>
                    <p>Удаляет заданные классы у элементов на странице.</p>
                </p>
            </li>
            <li>
                <p>
                    <b>.toggleClass()</b>
                    <p>Добавляет или удаляет заданный класс(ы) по принципу переключателя (добавляет, если элемент не содержит
                        класса, и удаляет, если класс есть).
                    </p>
                </p>
            </li>
            <li>
                <p>
                    <b>.hasClass()</b>
                    <p>Проверяет наличие класса у элементов страницы.</p>
                </p>
            </li>
            <li>
                <p>
                    <b>.clone()</b>
                    <p>Метод создает копии выбранных элементов страницы и возвращает их в виде объекта jQuery. Элементы копируются
                        вместе со всеми содержащимися внутри них элементами (так называемое глубокое копирование). </p>
                </p>
            </li>
            <li>
                <p>
                    <b>.val()</b>
                    <p> Метод позволяет получать и изменять значения элементов форм. Для элементов input - это значение атрибута
                        value; для списков выбора (select) – значение value выбранного элемента (в случае множественного
                        выбора – массив значений); в случае с textarea, метод .val() будет работать непосредственно с содержимым
                        тега textarea.</p>
                </p>
            </li>
        </ul>
        <br>
        <p>
            <b>Создание собственного плагина</b>
        </p>
        <br>
        <p>
            (function( $ ) {
        </p>
        <p>
            &nbsp&nbsp$.fn.myPlugin = function() {
        </p>
        <br>
        <p>
            &nbsp&nbsp&nbsp&nbsp// функциональность нашего плагина
        </p>
        <br>
        <p>
            &nbsp&nbsp};
        </p>
        <p>
            })(jQuery);
        </p>
    </div>
</BODY>

</HTML>