<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//RU">
<HTML>

<HEAD>
    <LINK rel=stylesheet href="../../css/styles.css" type=text/css>
    <META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=windows-1251">
    <META HTTP-EQUIV="Content-Language" CONTENT="ru">
    <title>Тема №22</title>
    <base target="_top">
</HEAD>

<BODY>
    <div class="title-1">
        Тема №22 "Сервера приложений"
    </div>
    <div class="content">
        <div class="title-2">
            22.1 Клиент-серверная архитектура. Сервер приложений. Масштабирование серверов
        </div>
        <p>
            <b>Клиент-серверным</b> приложением будем понимать информационную систему, основанную на использовании серверов
            баз данных. На стороне клиента выполняется код приложения, в который обязательно входят компоненты, поддерживающие
            интерфейс с конечным пользователем, производящие отчеты, выполняющие другие специфичные для приложения функции.
            Клиентская часть приложения взаимодействует с клиентской частью программного обеспечения управления базами данных,
            которая, фактически, является индивидуальным представителем СУБД для приложения.
        </p>
        <p>
            <b>Веб-приложение</b> — клиент-серверное приложение, в котором клиентом выступает браузер, а сервером — веб-сервер.
            Логика веб-приложения распределена между сервером и клиентом, хранение данных осуществляется, преимущественно,
            на сервере, обмен информацией происходит по сети. Одним из преимуществ такого подхода является тот факт, что
            клиенты не зависят от конкретной операционной системы пользователя, поэтому веб-приложения являются кроссплатформенными
            сервисами.
        </p>
        <p>
            <b>Масштабируемость</b> — способность устройства увеличивать свои возможности путем наращивания числа функц-ных
            блоков, выполняя одни и те же задачи.
        </p>
        <div class="title-2">
            22.2 Статические и динамические ресурсы
        </div>
        <p>
            Ресурсы могут быть статическими и динамическими.
            <i>Статические ресурсы</i> (HTML, JavaScript, изображения и т.д.) устанавливается только один раз. А
            <i>динамические ресурсы</i> (сервлеты, JSP, а также java-код) могут меняться в течение работы программы. Смысл разделения
            динамического и статического содержания в том, что статические ресурсы могут находиться под управлением HTTP-сервера,
            в то время как динамические нуждаются в движке (Servlet Engine) и в большинстве случаев в доступе к уровню данных.
            Рекомендуется разделить и разрабатывать параллельно две части приложения: Web-приложение, состоящее только из
            динамических ресурсов, и Web-приложение, состоящее только из статических ресурсов. Возможность разделить логику
            приложения и дизайн Web-страницы снижает сложность разработки Web-приложений и упрощает их поддержку.
        </p>
        <div class="title-2">
            22.3 Масштабируемость и кластеризация. Понятие кластера. Балансировка запросов
        </div>
        <p>
            <b>Кластеризация</b> – распределение аппаратуры и ПО по узлам, которые работают вместе как единая система с тем,
            чтобы гарантировать продолжение функционирования пользовательских приложений во время чрезмерных нагрузок, либо
            в случае выхода из строя одного из узлов кластера.
        </p>
        <p>
            <b>Кластер</b> – группа взаимосоединенных узлов, работающих совместно, составляя единый вычислительный ресурс и
            создавая иллюзию наличия единственной вычислительной машины. В качестве узлов кластером могут использоваться
            как одинаковые вычислительные системы, так и разные. По своей архитектуре кластерная вычислительная система является
            слабо связанной системой.
        </p>
        <p>
            Существует несколько распространенных подходов в организации распределения нагрузки:
            <ul class="list">
                <li>круговой DNS, когда для распределения нагрузки используется DNS-сервер;</li>
                <li>аппаратное распределение нагрузки, когда используется прибор, схожий по своим функциям с маршрутизатором;</li>
                <li>программное распределение нагрузки. Например программа "TCP/IP Network Load Balancing" от Microsoft;</li>
                <li>смешанные схемы, когда используется комбинация аппаратных и программных средств.</li>
            </ul>
        </p>
    </div>
</BODY>

</HTML>