<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//RU">
<HTML>

<HEAD>
    <LINK rel=stylesheet href="../../css/styles.css" type=text/css>
    <META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=windows-1251">
    <META HTTP-EQUIV="Content-Language" CONTENT="ru">
    <title>Тема №27</title>
    <base target="_top">
</HEAD>

<BODY>
    <div class="title-1">
        Тема №27 "EJB, JMS"
    </div>
    <div class="content">
        <div class="title-2">
            27.1 EJB
        </div>
        <p>
            <b>Enterprise JavaBeans</b> (также часто употребляется в виде аббревиатуры EJB) — спецификация технологии написания
            и поддержки серверных компонентов, содержащих бизнес-логику. Является частью Java EE.
        </p>
        <p>
            Эта технология обычно применяется, когда бизнес-логика требует как минимум один из следующих сервисов, а часто все из них:
            <ul class="list">
                <li>поддержка сохранности данных (persistence); данные должны быть в сохранности даже после остановки программы,
                    чаще всего достигается с помощью использования базы данных</li>
                <li>поддержка распределённых транзакций</li>
                <li>поддержка параллельного изменения данных и многопоточность</li>
                <li>поддержка событий</li>
                <li>поддержка именования и каталогов (JNDI)</li>
                <li>безопасность и ограничение доступа к данным</li>
                <li>поддержка автоматизированной установки на сервер приложений</li>
                <li>удалённый доступ</li>
            </ul>
        </p>
        <p>
            Каждый EJB-компонент является набором Java-классов со строго регламентированными правилами именования методов (верно для
            EJB 2.0, в EJB 3.0 за счет использования аннотаций выбор имён свободный). Бывают трёх основных типов:
            <ul class="list">
                <li>
                    <i>объектные</i> (Entity Bean) — перенесены в спецификацию Java Persistence API</li>
                <li>
                    <i>сессионные</i> (Session Beans), которые бывают
                    <ul class="list">
                        <li>stateless (без состояния)</li>
                        <li>stateful (с поддержкой текущего состояния сессии)</li>
                        <li>singleton (один объект на все приложение; начиная с версии 3.1)</li>
                    </ul>
                </li>
                <li>
                    <i>управляемые сообщениями</i> (Message Driven Beans) — их логика является реакцией на события в системе</li>
            </ul>
        </p>
        <div class="title-2">
            27.2 JMS
        </div>
        <p>
            <b>Java Message Service</b> (JMS) — стандарт промежуточного ПО для рассылки сообщений, позволяющий приложениям,
            выполненным на платформе Java EE, создавать, посылать, получать и читать сообщения.
        </p>
        <p>
            Коммуникация между компонентами, использующими JMS, асинхронна (процедура не дожидается ответа на своё сообщение) и независима
            от исполнения компонентов. JMS поддерживает две модели обмена сообщениями: «точка - точка» и «издатель-подписчик».
        </p>
        <p>
            Модель «точка - точка» характеризуется следующим:
            <ul class="list">
                <li>Каждое сообщение имеет только одного адресата.</li>
                <li>Сообщение попадает в «почтовый ящик», или «очередь» адресата и может быть прочитано когда угодно. Если адресат
                    не работал в момент отсылки сообщения, сообщение не пропадёт.</li>
                <li>После получения сообщения адресат посылает извещение.</li>
            </ul>
        </p>
        <p>
            Модель «издатель-подписчик» характеризуется следующим:
            <ul class="list">
                <li>Подписчик подписывается на определённую «тему».</li>
                <li>Издатель публикует своё сообщение. Его получают все подписчики этой темы.</li>
                <li>Получатель должен работать и быть подписан в момент отправки сообщения.</li>
            </ul>
        </p>
    </div>
</BODY>

</HTML>