<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//RU">
<HTML>
<HEAD>
    <LINK rel=stylesheet href="../../css/styles.css" type=text/css>
    <META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=windows-1251">
    <META HTTP-EQUIV="Content-Language" CONTENT="ru">
    <title>Тема №14</title>
    <base target="_top">
</HEAD>
<BODY>
  <div class="title-1">
    Тема №14 "Основы объектноориентированного программирования"
</div>
<div class="content">

    <div class="title-2">
        14.1 Методология процедурно-ориентированного и объектно-ориентированного программирования.
    </div>
    <p>
        <b>Объектно-ориентированный подход</b> обладает такими преимуществами, как:
        <ul class="list">
            <li>уменьшение сложности программного обеспечения;</li>
            <li>повышение надежности программного обеспечения;</li>
            <li>обеспечение возможности модификации отдельных компонентов программного обеспечения без изменения остальных его компонентов;</li>
            <li>обеспечение возможности повторного использования отдельных компонентов программного обеспечения.</li>
        </ul>
    </p>
    <p>
        Систематическое применение объектно-ориентированного подхода позволяет разрабатывать хорошо структурированные, надежные в эксплуатации, достаточно просто модифицируемые программные системы. Этим объясняется интерес программистов к объектно-ориентированному подходу и объектно-ориентированным языкам программирования. ООП является одним из наиболее интенсивно развивающихся направлений теоретического и прикладного программирования.
        
    </p>
    <div class="title-2">
        14.2 Объекты: состояние, поведение, уникальность. 
    </div>
    <p>
        <b>Объект</b> - это мыслимая или реальная сущность, обладающая характерным поведением и отличительными характеристиками и являющаяся важной в предметной области.
    </p>
    <p>
        Каждый объект имеет состояние, обладает четко определенным поведением и уникальной идентичностью.
    </p>
    <p>
        <b>Состояние <i>(state)</i></b> - совокупный результат поведения объекта: одно из стабильных условий, в которых объект может существовать, охарактеризованных количественно; в любой момент времени состояние объекта включает в себя перечень (обычно статический) свойств объекта и текущие значения (обычно динамические) этих свойств.
    </p>
    <p>
        <b>Поведение <i>(behavior)</i></b> - действия и реакции объекта, выраженные в терминах передачи сообщений и изменения состояния; видимая извне и воспроизводимая активность объекта.
    </p>
    <p>
        <b>Identity <i>(уникальность)</i></b> объекта состоит в том, что всегда можно определить, указывают две ссылки на один и тот же объект или на разные объекты. При этом два объекта могут во всем быть похожими, их образ в памяти может представляться одинаковыми последовательностями байтов, но, тем не менее, их Identity может быть различна.
    </p>
    <p>
        Наиболее распространенной ошибкой является понимание <b>уникальности</b> как <i>имени ссылки на объект</i> . Это неверно, т.к. на один объект может указывать несколько ссылок, и ссылки могут менять свои значения (ссылаться на другие объекты).
    </p>
    <p>
        Итак, <i>уникальность (identity)</i> - свойство объекта; то, что отличает его от других объектно-ориентированного
    </p>
    <div class="title-2">
        14.3 Классы: инкапсуляция, наследование, полиморфизм. 
    </div>
    <p>
        <b>Формально класс</b> - это <i>шаблон</i> поведения объектов определенного типа с заданными параметрами, определяющими состояние. Все <i>экземпляры</i> одного класса (объекты, порожденные от одного класса) имеют один и тот же набор свойств и общее поведение, то есть одинаково реагируют на одинаковые сообщения.
    </p>
    <p>
        Каждый класс также может иметь специальные методы, которые автоматически вызываются при создании и уничтожении объектов этого класса:
        <ul class="list">
            <li> конструктор (constructor) - выполняется при создании объектов;</li> 
            <li> деструктор (destructor) - выполняется при уничтожении объектов.</li> 
        </ul>
    </p>
    <p>
        Обычно <b>конструктор</b> и <b>деструктор</b> имеют специальный синтаксис, который может отличаться от синтаксиса, используемого для написания обычных методов класса.
    </p>
    <br>
    <p>
        <b>Инкапсуляция <i>(encapsulation)</i></b> - это сокрытие реализации класса и отделение его внутреннего представления от внешнего (интерфейса). При использовании объектно-ориентированного подхода не принято применять прямой доступ к свойствам какого-либо класса из методов других классов. Для доступа к свойствам класса принято задействовать специальные методы этого класса для получения и изменения его свойств.
    </p>
    <p>
        Открытые члены класса составляют внешний интерфейс объекта. Это та функциональность, которая доступна другим классам. Закрытыми обычно объявляются все свойства класса, а также вспомогательные методы, которые являются деталями реализации и от которых не должны зависеть другие части системы.
    </p>
    <p>
        Благодаря сокрытию реализации за внешним интерфейсом класса можно менять внутреннюю логику отдельного класса, не меняя код остальных компонентов системы. Это свойство называется модульность.
    </p>
    <p>
        Обеспечение доступа к свойствам класса только через его методы также дает ряд преимуществ. Во-первых, так гораздо проще контролировать корректные значения полей, ведь прямое обращение к свойствам отслеживать невозможно, а значит, им могут присвоить некорректные значения.
    </p>
    <br>
    <p>
        <b>Наследование <i>(inheritance)</i></b> - это отношение между классами, при котором класс использует структуру или поведение другого класса (одиночное наследование), или других (множественное наследование) классов. Наследование вводит иерархию "общее/частное", в которой подкласс наследует от одного или нескольких более общих суперклассов. Подклассы обычно дополняют или переопределяют унаследованную структуру и поведение.
    </p>
    <br>
    <p>
        <b>Полиморфизм <i>(polymorphism) </i></b>- положение теории типов, согласно которому имена (например, переменных) могут обозначать объекты разных (но имеющих общего родителя) классов. Следовательно, любой объект, обозначаемый полиморфным именем, может по-своему реагировать на некий общий набор операций.
    </p>
    <div class="title-2">
        14.4 Типы отношений между классами. Метаклассы. 
    </div>
    <p>
        Возможны следующие связи между классами в рамках объектной модели:
        <ul class="list">
            <li>Агрегация <i>(Aggregation);</i></li>
            <li>Ассоциация <i>(Association);</i></li>
            <li>Наследование <i>(Inheritance);</i></li>
            <li>Метаклассы <i>(Metaclass).</i></li>
        </ul>
    </p>
    <p>
        Отношение между классами типа <i>"содержит" (contain)</i> или <i>"состоит из"</i> называется агрегацией, или включением. Например, если аквариум наполнен водой и в нем плавают рыбки, то можно сказать, что аквариум агрегирует в себе воду и рыбок
    </p>
    <p>
        Объект класса Aquarium содержит несколько объектов Fish. В то же время каждая рыбка "знает", в каком именно аквариуме она живет. Каждый класс имеет свою роль в агрегации, которая указывает, какое место занимает класс в данном отношении. Имя роли не является обязательным элементом обозначений и может отсутствовать на диаграмме. В примере можно видеть роль home класса Aquarium (аквариум является домом для рыбок), а также роль inhabitants класса Fish (рыбки являются обитателями аквариума). Название роли обычно совпадает с названием соответствующего поля в классе. Изображение такого поля на диаграмме излишне, если уже указано имя роли. Т.е. в данном случае класс Aquarium будет иметь свойство (поле) inhabitants, а класс Fish - свойство home.
    </p>
    <p>
        Число объектов, участвующих в отношении, записывается рядом с именем роли. Запись "0..n" означает "от нуля до бесконечности". Приняты также обозначения:
        <ul class="list">
            <li> "1..n" - от единицы до бесконечности;</li>
            <li> "0" - ноль;</li>
            <li> "1" - один;</li>
            <li> "n" - фиксированное количество;</li>
            <li> "0..1" - ноль или один.</li>
        </ul>
    </p>
    <p>
        Если объекты одного класса ссылаются на один или более объектов другого класса, но ни в ту, ни в другую сторону отношение между объектами не носит характера "владения", или контейнеризации, такое отношение называют <b>ассоциацией <i>(association)</i></b>.
    </p>
    <div class="title-2">
        14.5  Метаклассы.
    </div>
    <p>
        В языке Java  есть <b>метакласс</b>. Это класс, который так и называется - <b>Class</b> (описывает классы), он располагается в основной библиотеке <b>java.lang</b>. Виртуальная машина использует его по прямому назначению. Когда загружается очередной .class-файл, содержащий описание нового класса, JVM порождает объект класса Class, который будет хранить его структуру. Таким образом, Java использует концепцию метакласса в самых практических целях. С помощью Class реализована поддержка статических (static) полей и методов. Наконец, этот класс содержит ряд методов, полезных для разработчиков
    </p>
    <div class="title-2">
        14.6 Достоинства и недостатки объектно-ориентированного программирования
    </div>
    <p>
      <b> Достоинства</b>
      <ul class="list">
        <li>Абстракция от деталей реализации</li>
        <li>Данные и операции описываются вместе</li>
        <li>Модульность</li>
        <li>Возможность создавать расширяемые системы</li>
        <li>Преимущества полиморфизма</li>
        <li>Обработка разнородных структур данных не различая вида объектов</li>
        <li>Изменение поведения во время исполнения (на этапе исполнения один объект может быть заменен другим)</li>
        <li>Создание базового "каркаса" (framework) для будущих приложений</li>
        <li>Преимущества многоразового использования компонентов</li>
        <li>Сокращается время на разработку</li>
        <li>Меньше ошибок</li>
        <li>Унификация</li>
    </ul>
</p>
<p> 
    <b>Недостатки</b>
    <ul class="list">
        <li>Более трудное документирование, чем в случае процедур и модулей. Любой метод может быть переопределен</li>
        <li>В сложных иерархиях классов поля и методы обычно наследуются с разных уровней, что усложняет понимание</li>
        <li>Код для обработки сообщения иногда "размазан" по многим маленьким методам</li>
        <li>Чем больше логики и данных скрыто в недрах класса, тем сложнее его расширять</li>
        <li>Неэффективность</li>
        <li>Неэффективность на этапе выполнения. Инкапсуляция данных приводит к необходимости выполнения процедурного вызова каждый раз при доступе к данным. </li>
        <li>Неэффективность распределения памяти. Необходима дополнительная память для одного указателя на объект и одного дескриптора типа для класса.</li>
        <li>Излишняя универсальность. В библиотечном классе часто содержится больше методов, чем это реально необходимо, что сказывается на размере программного кода.</li>
    </p>
    


</BODY>
</HTML>